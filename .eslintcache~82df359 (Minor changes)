[{"C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\index.js":"1","C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\reportWebVitals.js":"2","C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\App.js":"3","C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\config\\shared.js":"4","C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\common\\apiService.js":"5","C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\config\\baseUrl.js":"6","C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\config\\apiKeys.js":"7","C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\component\\index.js":"8","C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\component\\CryptoTransferWidgetComponent\\CryptoTransferWidget.jsx":"9","C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\config\\index.jsx":"10","C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\config\\config.js":"11","C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\component\\Layouts\\Loader\\Loader.js":"12"},{"size":569,"mtime":1607677641583,"results":"13","hashOfConfig":"14"},{"size":375,"mtime":1607664978792,"results":"15","hashOfConfig":"14"},{"size":187,"mtime":1607677641373,"results":"16","hashOfConfig":"14"},{"size":4527,"mtime":1607664978792,"results":"17","hashOfConfig":"14"},{"size":10071,"mtime":1607664978792,"results":"18","hashOfConfig":"14"},{"size":206,"mtime":1607664978792,"results":"19","hashOfConfig":"14"},{"size":156,"mtime":1607664978792,"results":"20","hashOfConfig":"14"},{"size":554,"mtime":1607677641564,"results":"21","hashOfConfig":"14"},{"size":80774,"mtime":1607677641557,"results":"22","hashOfConfig":"14"},{"size":212,"mtime":1607677641580,"results":"23","hashOfConfig":"14"},{"size":287,"mtime":1607677641576,"results":"24","hashOfConfig":"14"},{"size":133,"mtime":1607677641560,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1m9bhws",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":48,"fixableErrorCount":0,"fixableWarningCount":4,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\index.js",[],"C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\reportWebVitals.js",[],["53","54"],"C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\App.js",[],"C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\config\\shared.js",[],"C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\common\\apiService.js",["55","56"],"\r\nimport axios from \"axios\";\r\nimport publicIp from \"public-ip\";\r\n\r\nimport baseUrl, { apiStackBaseUrl, ipDataBaseUrl } from \"../config/baseUrl\";\r\nimport { apiStackAPIKey, ipDataAPIKey } from \"../config/apiKeys\";\r\nvar token = \"\";\r\n//  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoyMiwiZW1haWwiOiJ0ZXN0QHhwb3J0LWRpZ2l0YWwuY29tIiwiY29tcGFueV91dWlkIjoiZjRkNjViMjMtMWQ5Zi00YjVkLWFhYjItYzkzODk1YjY0MjZlIiwicm9sZSI6MiwiaWF0IjoxNjA3MzE3MDQyLCJleHAiOjE2MDc3NDkwNDJ9.r8xxjcr1apukaZRoEgIs33Gm3jI78tDrxEQ2Eujyq58\";\r\n\r\nconst getQuote = (token) => {\r\n  return fetch(\r\n    `${baseUrl}/api/crypto-engine/pricing?symbol=${token + \"-USD\"}`\r\n  ).then((response) => parseResponse(response));\r\n};\r\n\r\nconst getTransaction = (requestUUID) => {\r\n  return fetch(\r\n    `https://payment-test.xport-digital.com/api/crypto-engine/status?requestUUID=${requestUUID}`\r\n  ).then((response) => parseResponse(response));\r\n};\r\n\r\nconst getTransactionByEmail = (email) => {\r\n  return fetch(\r\n    `https://payment-test.xport-digital.com/api/crypto-engine/status?email=${email}`\r\n  ).then((response) => parseResponse(response));\r\n};\r\n\r\nconst createAffiliateAccount = async (data) => {\r\n  try {\r\n    const ip = await publicIp.v4();\r\n    const formData = new FormData();\r\n\r\n    formData.append(\"first_name\", data.firstname);\r\n    formData.append(\"last_name\", data.lastname);\r\n    formData.append(\"email\", data.email);\r\n    formData.append(\"signup_ip\", ip);\r\n    formData.append(\"address\", data.address);\r\n    formData.append(\"password\", data.password);\r\n    formData.append(\"status\", \"Approved\");\r\n\r\n    const url =\r\n      \"https://api.offer18.com/api/m/affiliate_create?api-key=4745IQXJORKEDGMFNVA&secret-key=2869A0C49D655B78C320983D2519A08C&mid=4745\";\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .post(url, formData)\r\n        .then((res) => {\r\n          resolve(res);\r\n        })\r\n        .catch((err) => {\r\n          reject(err.response.data);\r\n        });\r\n    });\r\n  } catch (err) {\r\n    throw new Error(err);\r\n  }\r\n};\r\n\r\nconst createMerchantAccount = (data) => {\r\n  var raw = {\r\n    email: data.email,\r\n    firstname: data.firstname,\r\n    lastname: data.lastname,\r\n    password: data.password,\r\n    password_repeat: data.password_repeat,\r\n    account_type: \"1\",\r\n    company_name: data.company_name,\r\n\r\n    status: \"1\",\r\n  };\r\n\r\n  const requestOptions = {\r\n    method: \"post\",\r\n    body: raw,\r\n    redirect: \"follow\",\r\n    mode: \"no-cors\",\r\n  };\r\n\r\n  const url =\r\n    \"https://xportdigitallimited.scaletrk.com/api/v2/network/affiliates?api-key=a8b38ace3007fe85a13bbbd8f12fd6bba8bb11ef\";\r\n\r\n  fetch(url, requestOptions).then((response) => {\r\n    return parseResponse(response);\r\n  });\r\n};\r\n\r\nconst parseResponseText = async (response) => {\r\n  if (response.ok) {\r\n    return response.json();\r\n  } else {\r\n    //   const error = await response.json();\r\n    const error = await response.json();\r\n    console.log(error.status);\r\n    alert(error.message);\r\n    // throw new Error(error.message);\r\n    return {error: error.message, code: error.code};\r\n  }\r\n};\r\n\r\nconst updateToken = (newToken) =>{\r\n  token = newToken;\r\n  localStorage.setItem('newToken', newToken); \r\n  console.log(token);\r\n}\r\n\r\nconst parseResponse = async (response) => {\r\n  if (response.ok) {\r\n    return response.json();\r\n  } else {\r\n    //   const error = await response.json();\r\n    const error = await response.json();\r\n    console.log(error);\r\n    alert(error.message);\r\n    return {error: error.message, code: error.code};\r\n    // throw new Error(error.message);\r\n  }\r\n};\r\n\r\nconst createQuote = (body) => {\r\n  return fetch(`${baseUrl}/api/crypto-engine/quote`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(body),\r\n    headers: {\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n    },\r\n  }).then((response) => parseResponseText(response));\r\n};\r\n\r\nconst sendEmail = (body) => {\r\n  return fetch(\r\n    \"https://jhvjpm2aad.execute-api.ap-southeast-1.amazonaws.com/default/SES-send-email\",\r\n    {\r\n      method: \"POST\",\r\n      mode: \"no-cors\",\r\n      body: JSON.stringify(body),\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n    }\r\n  ).then((response) => parseResponse(response));\r\n};\r\n\r\nconst getIpLocationInfo = (ip) => {\r\n  return fetch(\r\n    `${ipDataBaseUrl}${ip}?api-key=${ipDataAPIKey}`\r\n  ).then((response) => parseResponse(response));\r\n  // return  fetch(`${apiStackBaseUrl}${ip}?access_key=${apiStackAPIKey}&format=1`)\r\n  // .then(response=>parseResponse(response))\r\n};\r\n\r\nconst userAuth = (email,password) =>{\r\n  return fetch(`${baseUrl}/auth/login`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify({\r\n      email: email,\r\n      password: password\r\n    }),\r\n    headers: {\r\n      \"Content-type\": \"application/json; charset=UTF-8\"\r\n    },\r\n  }).then(async (response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    } else {\r\n      //   const error = await response.json();\r\n      const error = await response.json();\r\n      alert(error.error);\r\n      return {error: error.message, code: error.code};\r\n    }\r\n  });\r\n}\r\n\r\nconst postUserKyc = (email) => {\r\n  return fetch(`${baseUrl}/user-kyc/search`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify({\r\n      perPage: 10,\r\n      page: 1,\r\n      searchQuery: email,\r\n      kycStatus: \"\",\r\n    }),\r\n    headers: {\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n      Authorization: \"Bearer \" + token,\r\n    },\r\n  }).then(async (response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    } else {\r\n      //   const error = await response.json();\r\n      const error = await response.json();\r\n      alert(error.error);\r\n      // throw new Error(error.error);\r\n      return {error: error.message, code: error.code};\r\n    }\r\n  });\r\n};\r\n\r\nconst postSubmitUserKyc = (data) => {\r\n  return fetch(\"https://payment-kyc-test.xport-digital.com/api/v1/user-kyc\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify(data),\r\n    headers: {\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n      Authorization: \"Bearer \" + token,\r\n    },\r\n  }).then(async (response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    } else {\r\n      //   const error = await response.json();\r\n      const error = await response.json();\r\n      alert(error.error);\r\n      // throw new Error(error.error);\r\n      return {error: error.message, code: error.code};\r\n    }\r\n  });\r\n};\r\n\r\nconst getTransferDetailsForRequestUUID = (request_uuid, companyUUID) => {\r\n  // alert(\"request uuid \"+request_uuid);\r\n  return fetch(\r\n    `${baseUrl}/api/crypto-engine/status?requestUUID=`+request_uuid+'&companyUUID='+companyUUID,\r\n    {\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n        Authorization: \"Bearer \" + token,\r\n      },\r\n    }\r\n  ).then(async (response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    } else {\r\n      //   const error = await response.json();\r\n      const error = await response.json();\r\n      alert(error.error);\r\n      // throw new Error(error.error);\r\n      return {error: error.message, code: error.code};\r\n    }\r\n  });\r\n};\r\n\r\nconst getPaymentDetailsForUUID = (uuid) => {\r\n  return fetch(`${baseUrl}/details/query/${uuid}`, {\r\n    headers: {\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n      Authorization: \"Bearer \" + token,\r\n    },\r\n  }).then(async (response) => {\r\n    if (response.ok) {\r\n      return response.json();\r\n    } else {\r\n      //   const error = await response.json();\r\n      const error = await response.json();\r\n      alert(error.error);\r\n      // throw new Error(error.error);\r\n      return {error: error.message, code: error.code};\r\n    }\r\n  });\r\n};\r\n\r\nconst postPayment = (data) => {\r\n  return fetch(`${baseUrl}/api/payment/auth`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(data),\r\n    headers: {\r\n      \"Content-type\": \"application/json; charset=UTF-8\",\r\n      Authorization: \"Bearer \" + token,\r\n    },\r\n  }).then((response) => parseResponse(response));\r\n};\r\n\r\n\r\nconst getCheckEnrolledCard = (cardNumber)=>{\r\n  return fetch(`${baseUrl}/check-enrolled-status` , {    \r\n      method: \"POST\", \r\n      body: JSON.stringify({\r\n          cardNumber: cardNumber\r\n      }), \r\n      headers: { \r\n          \"Content-type\": \"application/json; charset=UTF-8\",\r\n          Authorization: \"Bearer \"+token\r\n      }})\r\n  .then(response=>parseResponse(response))\r\n\r\n}\r\n\r\nconst sendTransactionEmail = (receiver, subject, type, object) => {\r\n  return fetch(`https://jhvjpm2aad.execute-api.ap-southeast-1.amazonaws.com/default/SES-send-email` , {    \r\n    method: \"POST\", \r\n    body: JSON.stringify({\r\n        receiver: receiver,\r\n        subject: subject,\r\n        type: type,\r\n        object: object\r\n    })})\r\n      .then(response=>parseResponse(response));\r\n}\r\nconst customCheck = ()=>{\r\n  return fetch(`https://java-staging.fenige.pl:8181/fenige-mpi-visa` , {    \r\n      method: \"POST\", \r\n      body: new URLSearchParams({\r\n        'PaReq': 'eJxlkltvwjAMhf8K4p3m0qRUlYnE4GHVxMQuT3uLWguK2lDSFsG/n8NlbFqkSD6Oe+p8DnxuPeLyA4vBo4EVdp3d4KgqZ2M5lWpsYD1/x4OBI/qu2jsjIh5JYHdJX/hia11vwBaHp/zVaCVEooDdJDTo86XhtCa0BbBrApxt0HToStUgsIuCYj+43p9NIhJgdwGDr82279suY2xnj3ZS4hFrEQ2trcqorbNUqZgVdYWuBxaqgT3aWg8h6sj9VJUmX8w3//Yyj1e7txmwUAGl7dFILlIeSz4SOlM60ymwSx5sE9oyi6+XUax5xDnd9JqCNvxpfhV0Fo5+p4AQe3TFmcxjut5dAZ7avaPeDXH9iYE9Gl88B7pFT9jiADIsRSxpQKlKtNRqmsiUkN2KgmNF5CTn+mIZBLBgw27jJECXSVP05wV8A1/aqWQ=',\r\n        'TermUrl': 'https://ecom-staging.fenige.pl/client/payments/terminate',\r\n        'MD': 'YTZjZGYzM2ItODA5Yi00Y2YwLWJlNTUtZDBlMjYwNGZkMzkw'\r\n    }), \r\n      headers: { \r\n          \"Content-type\": \"application/x-www-form-urlencoded\",\r\n      }})\r\n  .then(response=>console.log(response))\r\n}\r\nexport {\r\n  getQuote,\r\n  createQuote,\r\n  sendEmail,\r\n  getIpLocationInfo,\r\n  postUserKyc,\r\n  postSubmitUserKyc,\r\n  getPaymentDetailsForUUID,\r\n  getTransferDetailsForRequestUUID,\r\n  postPayment,\r\n  getTransaction,\r\n  getTransactionByEmail,\r\n  createAffiliateAccount,\r\n  createMerchantAccount,\r\n  getCheckEnrolledCard,\r\n  userAuth,\r\n  updateToken,\r\n  customCheck,\r\n  sendTransactionEmail\r\n};\r\n","C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\config\\baseUrl.js",[],"C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\config\\apiKeys.js",[],"C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\component\\index.js",[],"C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\component\\CryptoTransferWidgetComponent\\CryptoTransferWidget.jsx",["57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104"],"import \"./../../assets/css/style.css\";\r\nimport React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport renderHTML  from \"react-render-html\";\r\nimport {Base64} from \"js-base64\";\r\n\r\n// react component that creates a form divided into multiple steps\r\nimport StepZilla from \"react-stepzilla\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nimport publicIp from \"public-ip\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  FormGroup,\r\n  FormControl,\r\n  FormLabel,\r\n  Tooltip,\r\n  OverlayTrigger,\r\n  Button,\r\n  Spinner,\r\n  Form,\r\n} from \"react-bootstrap\";\r\nimport Popup from 'reactjs-popup';\r\nimport 'reactjs-popup/dist/index.css';\r\nimport \"./CryptoTransferWidget.css\";\r\nimport cx from \"classnames\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Select from \"react-select\";\r\n\r\n// import Recaptcha from \"react-recaptcha\";\r\n// import ReCAPTCHA from \"react-google-recaptcha\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport Loader from \"../Layouts/Loader/Loader\";\r\nimport walletValidator from \"wallet-address-validator\";\r\nimport { countryList } from \"../../config/shared\";\r\nimport config from \"../../config/config\";\r\nimport credentials from \"../../config/index.jsx\";\r\nimport {\r\n  customCheck,\r\n  getQuote,\r\n  createQuote,\r\n  sendEmail,\r\n  getIpLocationInfo,\r\n  postUserKyc,\r\n  postSubmitUserKyc,\r\n  getPaymentDetailsForUUID,\r\n  getTransferDetailsForRequestUUID,\r\n  postPayment,\r\n  getCheckEnrolledCard,\r\n  userAuth,\r\n  updateToken,\r\n  sendTransactionEmail,\r\n} from \"../../common/apiService\";\r\nimport queryString from \"query-string\";\r\nconst validateEth = (address) => {\r\n  return walletValidator.validate(address, \"ETH\");\r\n};\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        className={\r\n          (this.props.hidden ? \"card-hidden\" : \"\") +\r\n          (this.props.calendar ? \"card-calendar\" : \"\") +\r\n          (this.props.plain ? \"card-plain\" : \"\") +\r\n          (this.props.wizard ? \"card-wizard\" : \"\") +\r\n          \" cryptotransferwidget\"\r\n        }\r\n      >\r\n        {this.props.title !== undefined || this.props.category !== undefined ? (\r\n          <div\r\n            className={\"header\" + (this.props.textCenter ? \" text-center\" : \"\")}\r\n          >\r\n            <h4 className=\"title\">{this.props.title}</h4>\r\n            <p className=\"category\">{this.props.category}</p>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <div\r\n          className={\r\n            \"content\" +\r\n            (this.props.ctAllIcons ? \" all-icons\" : \"\") +\r\n            (this.props.ctFullWidth ? \" content-full-width\" : \"\") +\r\n            (this.props.ctTextCenter ? \" text-center\" : \"\") +\r\n            (this.props.tableFullWidth ? \" table-full-width\" : \"\")\r\n          }\r\n        >\r\n          {this.props.content}\r\n        </div>\r\n        {this.props.stats !== undefined || this.props.legend !== undefined ? (\r\n          <div\r\n            className={\r\n              \"footer\" + (this.props.ftTextCenter ? \" text-center\" : \"\")\r\n            }\r\n          >\r\n            {this.props.legend !== undefined ? (\r\n              <div className=\"legend\">{this.props.legend}</div>\r\n            ) : null}\r\n            {this.props.stats !== undefined ? <hr /> : null}\r\n            {this.props.stats !== undefined ? (\r\n              <div className=\"stats\">{this.props.stats}</div>\r\n            ) : null}\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass CustomButton extends Component {\r\n  render() {\r\n    const {\r\n      fill,\r\n      simple,\r\n      pullRight,\r\n      block,\r\n      wd,\r\n      round,\r\n      icon,\r\n      neutral,\r\n      twitter,\r\n      facebook,\r\n      google,\r\n      linkedin,\r\n      pinterest,\r\n      youtube,\r\n      tumblr,\r\n      github,\r\n      behance,\r\n      dribbble,\r\n      reddit,\r\n      stumbleupon,\r\n      ...rest\r\n    } = this.props;\r\n\r\n    const btnClasses = cx({\r\n      \"btn-fill\": fill,\r\n      \"btn-simple\": simple,\r\n      \"pull-right\": pullRight,\r\n      \"btn-block\": block,\r\n      \"btn-wd\": wd,\r\n      \"btn-round\": round,\r\n      \"btn-icon\": icon,\r\n      \"btn-neutral\": neutral,\r\n      \"btn-social btn-twitter\": twitter,\r\n      \"btn-social btn-facebook\": facebook,\r\n      \"btn-social btn-google\": google,\r\n      \"btn-social btn-linkedin\": linkedin,\r\n      \"btn-social btn-pinterest\": pinterest,\r\n      \"btn-social btn-youtube\": youtube,\r\n      \"btn-social btn-tumblr\": tumblr,\r\n      \"btn-social btn-github\": github,\r\n      \"btn-social btn-behance\": behance,\r\n      \"btn-social btn-dribbble\": dribbble,\r\n      \"btn-social btn-reddit\": reddit,\r\n      \"btn-social btn-stumbleupon\": stumbleupon,\r\n    });\r\n\r\n    return <Button className={btnClasses} {...rest} />;\r\n  }\r\n}\r\n\r\nCustomButton.propTypes = {\r\n  fill: PropTypes.bool,\r\n  simple: PropTypes.bool,\r\n  pullRight: PropTypes.bool,\r\n  block: PropTypes.bool,\r\n  wd: PropTypes.bool,\r\n  round: PropTypes.bool,\r\n  icon: PropTypes.bool,\r\n  neutral: PropTypes.bool,\r\n  twitter: PropTypes.bool,\r\n  facebook: PropTypes.bool,\r\n  google: PropTypes.bool,\r\n  linkedin: PropTypes.bool,\r\n  pinterest: PropTypes.bool,\r\n  youtube: PropTypes.bool,\r\n  tumblr: PropTypes.bool,\r\n  github: PropTypes.bool,\r\n  behance: PropTypes.bool,\r\n  dribbble: PropTypes.bool,\r\n  reddit: PropTypes.bool,\r\n  stumbleupon: PropTypes.bool,\r\n};\r\n\r\nclass Step1 extends React.Component {\r\n  state = {\r\n    controls: {\r\n      current_token: {\r\n        value: null,\r\n        details: null,\r\n      },\r\n      email: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        validations: {\r\n          required: true,\r\n          email: true,\r\n        },\r\n        error: null,\r\n      },\r\n      wallet_address: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        validations: {\r\n          required: true,\r\n          custom: [validateEth],\r\n        },\r\n        error: null,\r\n      },\r\n      amount_to_receive: {\r\n        value: \"\",\r\n        valid: true,\r\n        touched: false,\r\n        error: null,\r\n      },\r\n      amount_to_purchase: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        validations: {\r\n          required: true,\r\n          minValue: 1,\r\n        },\r\n        locationInfo: null,\r\n        error: null,\r\n      },\r\n    },\r\n    // email: \"\",\r\n    // wallet_address: \"\",\r\n    // amount_to_receive: \"\",\r\n    drop_down_selected: false,\r\n    emailError: null,\r\n    captchaVerified: false,\r\n    dropdownVisible: false,\r\n    // current_token: \"Select token\",\r\n    // current_token: null,\r\n    loading: false,\r\n    intervalRef: null,\r\n    error: null,\r\n    ipAddress: null,\r\n    request_uuid: \"\"\r\n  };\r\n\r\n  /*\r\n  isValidated = () => {\r\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n    const {\r\n      email,\r\n      wallet_address,\r\n      amount_to_receive,\r\n      drop_down_selected,\r\n      captchaVerified,\r\n    } = this.state;\r\n    var errorOccured = true;\r\n\r\n    if (email.trim().length > 0) {\r\n      const emailValidated = re.test(email);\r\n      errorOccured = !emailValidated;\r\n    } else {\r\n      errorOccured = true;\r\n      this.setState({\r\n        emailError: (\r\n          <span className=\"text-danger\">\r\n            You need to specify an valid email\r\n          </span>\r\n        ),\r\n      });\r\n    }\r\n\r\n    if (wallet_address.trim().length == 0) {\r\n      errorOccured = true;\r\n      this.setState({\r\n        walletAddressError: (\r\n          <span className=\"text-danger\">\r\n            You need to specify an wallet address\r\n          </span>\r\n        ),\r\n      });\r\n      // }\r\n\r\n      // if (amount_to_receive.trim().length == 0) {\r\n      //   errorOccured = true;\r\n      //   this.setState({\r\n      //     amountToReceiveError: (\r\n      //       <span className=\"text-danger\">\r\n      //         You need to specify an amount to receive\r\n      //       </span>\r\n      //     ),\r\n      //   });\r\n    }\r\n\r\n    if (!drop_down_selected) {\r\n      errorOccured = true;\r\n      this.setState({\r\n        dropDownErorr: <p className=\"text-danger\">Please Select a Token</p>,\r\n      });\r\n    }\r\n\r\n    if (!captchaVerified) {\r\n      errorOccured = true;\r\n      this.setState({\r\n        captchaError: <span className=\"text-danger\">Verify Captcha</span>,\r\n      });\r\n    }\r\n    return true;\r\n  };\r\n  */\r\n\r\n  componentDidMount() {\r\n    // fetch(\"http://api.ipstack.com/39.33.200.221?access_key=6beecd37287531884502001e0016a2be&format=1\")\r\n    // .then(response=>response.json())\r\n    // .then(response=>console.log(response))\r\n    // .catch(e=>console.error(e));\r\n  \r\n\r\n    console.log(this.state);\r\n    console.log(localStorage.getItem('newToken'));\r\n    if(new Date().getTime() > parseInt(localStorage.getItem('sessionExpiration'),10) && localStorage.getItem('newToken')){\r\n      localStorage.removeItem('newToken');\r\n      console.log('session Expired');\r\n    }\r\n    else{\r\n      console.log('Session Valid');\r\n    }\r\n\r\n     if(!localStorage.getItem(\"newToken\")){\r\n        userAuth('test@xport-digital.com', 'Macon!877')\r\n          .then((response) =>{\r\n            // console.log(response);\r\n            if(response.authenticated){\r\n              console.log('User authenticated');\r\n              updateToken(response.token);\r\n              localStorage.setItem('sessionExpiration', (new Date(new Date().getTime() + 60 * 60 * 24 * 1000).getTime()).toString());\r\n            }\r\n            else{\r\n              window.alert('user not authenticated');\r\n            }\r\n          });\r\n        }\r\n        else{\r\n          updateToken(localStorage.getItem('newToken'));\r\n        }\r\n        \r\n\r\n    let redLocation =  window.location.href;\r\n    if(redLocation.indexOf('kyc=true') > -1 && localStorage.getItem('uuid') && localStorage.getItem('kyc')){\r\n      this.setState({request_uuid:localStorage.getItem('uuid')},()=>{\r\n        console.log(\"kyc parameter uuid >>>>\",this.state.request_uuid);\r\n        this.props.setStepState(2, {\r\n          uuid: this.state.request_uuid,\r\n        });\r\n        this.props.jumpToStep(2);\r\n      })\r\n     \r\n    }\r\n    else{\r\n      localStorage.removeItem('uuid');\r\n      localStorage.removeItem('kyc');\r\n    }\r\n    let req__id = queryString.parse(redLocation.substring(redLocation.indexOf('uuid')));\r\n    console.log(req__id);\r\n    if(req__id.uuid && req__id.uuid.length > 0 && localStorage.getItem('paymentRequest') !== 'completed'){\r\n      this.setState({request_uuid:req__id.uuid},()=>{\r\n        getPaymentDetailsForUUID(req__id.uuid).\r\n        then(response=>{\r\n          console.log(response);\r\n          localStorage.setItem('paymentRequest','completed');\r\n          if(response.error && response.code === 400){\r\n            this.setState({loading: false});\r\n            alert('Session Expired');\r\n            localStorage.clear();\r\n            this.props.jumpToStep(0);\r\n          }\r\n          else if(response.error){\r\n            this.setState({loading: false});\r\n            console.log(response)\r\n            return;\r\n          }\r\n          if(response.transactionStatus===\"APPROVED\"){\r\n            this.props.setStepState(this.props.stepIndex, {\r\n              controls: response,\r\n              uuid: this.state.request_uuid,\r\n            });\r\n            this.props.jumpToStep(3);\r\n          }else if(response.transactionStatus===\"DECLINED\"){\r\n            this.props.setStepState(this.props.stepIndex, {\r\n              controls: response,\r\n              uuid: this.state.request_uuid,\r\n            });\r\n            this.props.jumpToStep(3);\r\n          }\r\n        })\r\n      })\r\n\r\n    }\r\n\r\n\r\n    if (this.props.stepState) {\r\n      this.setState(\r\n        {\r\n          ...this.props.stepState,\r\n        },\r\n        () => {\r\n          this.getPriceQuote(this.state.controls[\"current_token\"].value.label);\r\n          const intervalRef = setInterval(() => {\r\n            this.getPriceQuote(\r\n              this.state.controls[\"current_token\"].value.label\r\n            );\r\n          }, 5000);\r\n\r\n          this.setState({\r\n            intervalRef: intervalRef,\r\n          });\r\n        }\r\n      );\r\n    }\r\n\r\n\r\n  }\r\n\r\n  verifyCallback = (response) => {\r\n    console.log(\"callback called\", response);\r\n    this.setState({\r\n      captchaVerified: true,\r\n    });\r\n  };\r\n\r\n  onLoadCallback = function () {\r\n    console.log(\"callback called\");\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const controls = { ...this.state[\"controls\"] };\r\n    const control = { ...controls[e.target.name] };\r\n    control.value = e.target.value;\r\n    control.touched = true;\r\n    control.valid = this.validateField(control);\r\n    controls[e.target.name] = control;\r\n    if (e.target.name == \"amount_to_purchase\") {\r\n      if (!this.state.controls.current_token.details || !control.value) {\r\n        controls[\"amount_to_receive\"].value = \"\";\r\n      } else {\r\n        controls[\"amount_to_receive\"].value = (\r\n          e.target.value /\r\n          this.state.controls.current_token.details.result.askPrice\r\n        ).toFixed(4);\r\n      }\r\n    }\r\n    this.setState({\r\n      controls: controls,\r\n    });\r\n  };\r\n\r\n  validateField = (control) => {\r\n    const value = control.value;\r\n    let isValid = true;\r\n    const validations = control.validations;\r\n    if (!validations) return true;\r\n    if (validations.required) {\r\n      isValid = isValid && !!value;\r\n    }\r\n    if (validations.email) {\r\n      isValid = isValid && /.+\\@.+\\..+/.test(value);\r\n    }\r\n    if (validations.minValue) {\r\n      isValid = isValid && !isNaN(value) && value >= validations.minValue;\r\n    }\r\n    if (validations.custom && validations.custom.length > 0) {\r\n      validations.custom.forEach((customValidator) => {\r\n        isValid = isValid && customValidator(value);\r\n      });\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  toggleDropdown = () => {\r\n    this.setState({\r\n      dropdownVisible: !this.state.dropdownVisible,\r\n    });\r\n  };\r\n\r\n  getPriceQuote = (token) => {\r\n    console.log(token);\r\n    getQuote(token)\r\n      .then((response) => {\r\n        const controls = { ...this.state.controls };\r\n        controls[\"current_token\"].details = response;\r\n        controls[\"current_token\"].valid = true;\r\n        if (!controls[\"amount_to_purchase\"].value) {\r\n          controls[\"amount_to_receive\"].value = \"\";\r\n        } else {\r\n          controls[\"amount_to_receive\"].value = (\r\n            controls[\"amount_to_purchase\"].value /\r\n            controls[\"current_token\"].details.result.askPrice\r\n          ).toFixed(4);\r\n        }\r\n        this.setState({\r\n          controls: controls,\r\n          drop_down_selected: true,\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n  };\r\n\r\n  setToken = (token) => {\r\n    const controls = { ...this.state.controls };\r\n    controls[\"current_token\"].value = token;\r\n    controls[\"current_token\"].valid = false;\r\n    controls[\"current_token\"].touched = true;\r\n\r\n    if (this.state.intervalRef) {\r\n      clearInterval(this.state.intervalRef);\r\n    }\r\n\r\n    if (!token) return;\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n\r\n    getQuote(token.label)\r\n      .then((response) => {\r\n        controls[\"current_token\"].details = response;\r\n        controls[\"current_token\"].valid = true;\r\n        if (!controls[\"amount_to_purchase\"].value) {\r\n          controls[\"amount_to_receive\"].value = \"\";\r\n        } else {\r\n          controls[\"amount_to_receive\"].value = (\r\n            controls[\"amount_to_purchase\"].value /\r\n            controls[\"current_token\"].details.result.askPrice\r\n          ).toFixed(4);\r\n        }\r\n\r\n        const intervalRef = setInterval(\r\n          () => this.getPriceQuote(token.label),\r\n          5000\r\n        );\r\n        this.setState({\r\n          controls: controls,\r\n          drop_down_selected: true,\r\n          loading: false,\r\n          intervalRef: intervalRef,\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        this.setState({ loading: false });\r\n      });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(this.state);\r\n    // this.props.setStepState(this.props.stepIndex , {controls:this.state.controls });\r\n    // clearInterval(this.state.intervalRef);\r\n    // this.props.jumpToStep(1);\r\n\r\n    const uuid = uuidv4();\r\n    // const company_uuid = uuidv4();\r\n\r\n    const body = {\r\n      requestUUID: uuid,\r\n      email: this.state.controls.email.value,\r\n      amount: this.state.controls.amount_to_purchase.value,  \r\n      walletAddress: this.state.controls.wallet_address.value,\r\n      company_uuid: config.CompanyUuid,\r\n};\r\nconsole.log(body);\r\nthis.setState({loading:true})\r\ncreateQuote(body)\r\n  .then((response) => {\r\n    // clearInterval(this.state.intervalRef);\r\n    console.log(response);\r\n    // return;\r\n    let tempUUID = response.result.requestUUID;\r\n    let companyUUID = response.result.companyUUID;\r\n    postUserKyc(this.state.controls.email.value)\r\n      .then((response) => {\r\n        if(response.error && response.code === 400){\r\n          this.setState({loading: false});\r\n          alert('Session Expired');\r\n          localStorage.clear();\r\n          this.props.jumpToStep(0);\r\n        }\r\n        else if(response.error){\r\n          this.setState({loading: false});\r\n          console.log(response)\r\n          return;\r\n        }\r\n        console.log(\r\n          response,\r\n          \"kyc response is here \",\r\n          response.data.records,\r\n          \" \",\r\n          response.data.records.length\r\n        );\r\n        if (response.data.records.length == 0) {\r\n          localStorage.setItem('uuid', tempUUID);\r\n          console.log(\"inside if, company UUID\"+companyUUID);\r\n          this.props.setStepState(this.props.stepIndex, {\r\n            controls: this.state.controls,\r\n            uuid: tempUUID,\r\n            company_uuid: companyUUID\r\n          });\r\n          this.setState({loading:false})\r\n          this.props.jumpToStep(1);\r\n        } else {\r\n          if(response.data.records[0].status == 'approved' || response.data.records[0].status == 'pending'){\r\n            this.props.setStepState(this.props.stepIndex, {\r\n              controls: this.state.controls,\r\n              uuid: uuid,\r\n            });\r\n            console.log(\"inside else\");\r\n            this.setState({loading:false})\r\n            this.props.jumpToStep(2);\r\n          }\r\n          else{\r\n            this.setState({loading: false});\r\n            alert('Kyc not verified');\r\n          }\r\n        }\r\n      }) .catch((error) => {\r\n        console.log(typeof error);\r\n        console.error(error.message);\r\n        console.log(\r\n          \"inside post kyc error \",\r\n          JSON.stringify(error),\r\n          typeof error\r\n        );\r\n        this.setState({\r\n          error: error.message,\r\n          loading:false\r\n         \r\n            });\r\n\r\n            setTimeout(\r\n              () =>\r\n                this.setState({ \r\n                  error: null,\r\n                }),\r\n              2000\r\n            );\r\n          });\r\n        /*\r\n      const sendEmailBody =  { \r\n        receiver: this.state.controls.email.value,\r\n        subject: \"USER CONFIRMATION\",\r\n        type: \"USER_CONFIRM\",\r\n      object: {\r\n          email: this.state.controls.email.value, \r\n          name: \"XPORT DIGITAL\", //hardcode\r\n          datetime: new Date(), //systemdate\r\n          ip: this.state.ipAddress,\r\n          location: this.state.locationInfo.city \r\n      }\r\n    }\r\n\r\n    */\r\n\r\n        // sendEmail(sendEmailBody).then(res=>{\r\n        //    this.props.setStepState(this.props.stepIndex , {controls:this.state.controls });\r\n        //   this.props.jumpToStep(1);\r\n        //   clearInterval(this.intervalRef);\r\n        // }).catch(error=>{\r\n        //   if(error.message ==\"Unexpected end of input\"){\r\n        //     this.props.setStepState(this.props.stepIndex , {controls:this.state.controls });\r\n        //     this.props.jumpToStep(1);\r\n        //     clearInterval(this.intervalRef);\r\n        //   }\r\n        //   else {\r\n        //     this.setState({\r\n        //       error: error.message\r\n        //     });\r\n        //   }\r\n        // })\r\n        // this.setState({\r\n        //   nextButtonText: \"Pay Now\",\r\n        //   backButtonText: \"Back\",\r\n        // });\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"inside error\");\r\n        console.log(error.message);\r\n        if (error.message == \"Initial Transaction Pending.\") {\r\n          postUserKyc(this.state.controls.email.value)\r\n            .then((response) => {\r\n              if(response.error && response.code === 400){\r\n                this.setState({loading: false});\r\n                alert('Session Expired');\r\n                localStorage.clear();\r\n                this.props.jumpToStep(0);\r\n              }\r\n              else if(response.error){\r\n                this.setState({loading: false});\r\n                console.log(response)\r\n                return;\r\n              }\r\n              console.log(\"response is here \", response);\r\n              if (response.data.records == 0) {\r\n                this.setState({loading: false});\r\n                alert(\"No KYC Data Found\");\r\n                this.props.setStepState(this.props.stepIndex, {\r\n                  controls: this.state.controls,\r\n                });\r\n              } else {\r\n                if(response.data.records[0].status == 'approved' || response.data.records[0].status == 'pending'){\r\n                  this.props.setStepState(this.props.stepIndex, {\r\n                    controls: this.state.controls,\r\n                    uuid: uuid,\r\n                    company_uuid: response.data.records[0].company_uuid,\r\n                  });\r\n                  console.log(\"inside else\");\r\n                  this.setState({loading:false})\r\n                  this.props.jumpToStep(2);\r\n                }\r\n                else{\r\n                  this.setState({loading: false});\r\n                  alert('Kyc not verified');\r\n                }\r\n                \r\n              }\r\n            })\r\n            .catch((error) => {\r\n              this.setState({loading: false});\r\n              console.error(error);\r\n            });\r\n        }\r\n        else{\r\n          this.setState({loading: false});\r\n        }\r\n        // this.setState({\r\n        //   error: error.message\r\n        // });\r\n\r\n        setTimeout(() => this.setState({ error: null }), 6000);\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  captchaExpired = () => {\r\n    this.setState({\r\n      captchaVerified: false,\r\n    });\r\n  };\r\n\r\n  isFormValid = () => {\r\n    let isValid = true;\r\n    for (const control in this.state.controls) {\r\n      isValid = isValid && this.state.controls[control].valid;\r\n    }\r\n    // isValid = isValid && this.state.captchaVerified;\r\n    return isValid;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      dropdownVisible,\r\n      current_token,\r\n      controls,\r\n      ipAddress,\r\n      locationInfo,\r\n    } = this.state;\r\n    console.log(\r\n      controls,\r\n      \" \",\r\n      this.props.stepState,\r\n      \" \",\r\n      ipAddress,\r\n      \" \",\r\n      locationInfo,\r\n      \" \",\r\n      this.props\r\n    );\r\n    return (\r\n      <div className=\"wizard-step text-left\">\r\n      \r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Row style={{ opacity: 0 }}>\r\n            <Col md={6}>13</Col>\r\n            <Col md={6}>13</Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <FormLabel>\r\n                  Select Token<span className=\"text-danger\">*</span>\r\n                </FormLabel>\r\n                <Select\r\n                  name=\"current_token\"\r\n                  value={controls.current_token.value}\r\n                  options={[\r\n                    { value: 1, label: \"USDT\" },\r\n                    { value: 2, label: \"BTC\" },\r\n                    { value: 3, label: \"ETH\" },\r\n                  ]}\r\n                  className=\"selectToken\"\r\n                  onChange={(value) => {\r\n                    this.setToken(value);\r\n                  }}\r\n                />\r\n                {this.state.controls.current_token.details && (\r\n                  <p\r\n                    style={{\r\n                      textAlign: \"left\",\r\n                      marginTop: 2,\r\n                      fontSize: 12,\r\n                      fontFamily: \"sans-serif\",\r\n                      fontWeight: 600,\r\n                    }}\r\n                  >\r\n                    Price:{\" \"}\r\n                    {this.state.controls.current_token.details.result.askPrice}\r\n                  </p>\r\n                )}\r\n                {this.state.dropDownErorr}\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md={6} mdOffset={1}>\r\n              <FormGroup>\r\n                <OverlayTrigger\r\n                  overlay={\r\n                    <Tooltip placement=\"right\" id=\"wallet-tooltip\">\r\n                      Wallet address must belong to you.\r\n                    </Tooltip>\r\n                  }\r\n                  placement=\"right\"\r\n                >\r\n                  <FormLabel>\r\n                    Wallet Address<span className=\"text-danger\">*</span>\r\n                  </FormLabel>\r\n                </OverlayTrigger>\r\n                <FormControl\r\n                  type=\"text\"\r\n                  name=\"wallet_address\"\r\n                  placeholder=\"wallet-address\"\r\n                  value={controls[\"wallet_address\"].value}\r\n                  onChange={this.handleChange}\r\n                />\r\n                <small\r\n                  className=\"form-text text-muted \"\r\n                  style={{ fontWeight: 400 }}\r\n                >\r\n                  Format: 0x89205A3A3b2A69De6Dbf7f01ED13B2108B2c43e7\r\n                </small>\r\n              </FormGroup>\r\n              {this.state.walletAddressError}\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col md={6} mdOffset={1}>\r\n              <FormGroup>\r\n                <FormLabel>\r\n                  Amount to Purchase<span className=\"text-danger\">*</span>\r\n                </FormLabel>\r\n                <FormControl\r\n                  value={controls.amount_to_purchase.value}\r\n                  type=\"number\"\r\n                  name=\"amount_to_purchase\"\r\n                  placeholder=\"0.00\"\r\n                  onChange={this.handleChange}\r\n                />\r\n                {this.state.amountToReceiveError}\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md={6} mdOffset={1}>\r\n              <FormGroup>\r\n                <FormLabel>\r\n                  Email <span className=\"text-danger\">*</span>\r\n                </FormLabel>\r\n                <FormControl\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  autoComplete=\"off\"\r\n                  value={controls.email.value}\r\n                  placeholder=\"ex: user@email.com\"\r\n                  onChange={this.handleChange}\r\n                />\r\n                {this.state.emailError}\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={6} mdOffset={1}>\r\n              <FormGroup>\r\n                <FormLabel>Amount You Will Receive</FormLabel>\r\n                <FormControl\r\n                  type=\"number\"\r\n                  name=\"amount_to_receive\"\r\n                  placeholder=\"0.00\"\r\n                  value={controls.amount_to_receive.value}\r\n                  disabled\r\n                  onChange={this.handleChange}\r\n                />\r\n                {this.state.amountToReceiveError}\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md={6} mdOffset={1} style={{ paddingTop: \"27px\" }}>\r\n              {/* // sitekey=\"6LduluAZAAAAAKCPy4Crt7nt1ETYNicFFYKIB6yX\" */}\r\n              {/* <ReCAPTCHA\r\n                sitekey=\"6LdHAOQZAAAAAFmPE4QuQaH_M2TOw1CR78OrAb47\"\r\n                 onChange={this.verifyCallback}\r\n                 onExpired = {this.captchaExpired}\r\n                 onErrored={(error)=>console.log(error)}\r\n               /> */}\r\n\r\n              {/* <Recaptcha\r\n                render=\"explicit\"\r\n                sitekey=\"6LdHAOQZAAAAAFmPE4QuQaH_M2TOw1CR78OrAb47\"\r\n                verifyCallback={this.verifyCallback}\r\n                expiredCallback={this.captchaExpired} */}\r\n\r\n              {/* /> */}\r\n              {/* {this.state.captchaError} */}\r\n            </Col>\r\n          </Row>\r\n          {this.state.error && (\r\n            <div\r\n              style={{ marginTop: 8, fontWeight: 500 }}\r\n              className=\"alert alert-danger\"\r\n              role=\"alert\"\r\n            ></div>\r\n          )}\r\n\r\n          {/* { this.state.error && <div style={{marginTop:8, fontWeight: 500}} className=\"alert alert-danger\" role=\"alert\"> */}\r\n          {/* {this.state.error}    */}\r\n          {/* </div>   */}\r\n          {/* } */}\r\n\r\n          <div className=\"footer-items w-100 mt-5\">\r\n            <div className=\"copyright-container\">\r\n            <img src={credentials.logo} className=\"copyright-logo\" alt=\"Logo\" style={{marginRight:20}} />\r\n            <h6>© {credentials.title}. All rights reserved</h6></div>\r\n            {/* <button className=\"btn btn-prev  btn-fill pull-right btn-wd\">Previous</button> */}\r\n            <button\r\n              disabled={!this.isFormValid() || this.state.error}\r\n              className=\"btn  btn-primary pull-right btn-wd\"\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n        </Form>\r\n\r\n        {this.state.loading && (\r\n          <div className=\"spinner-container\">\r\n            <div className=\"spinner\">\r\n              {/* <Spinner animation=\"border\" role=\"status\" variant=\"light\">\r\n                       <span className=\"sr-only\">Loading...</span>\r\n                 </Spinner> */}\r\n              <Loader />\r\n              {/* <img src=\"https://i.pinimg.com/originals/59/22/20/5922208e18658f5e83b6ad801b895f71.gif\" />  */}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass KYC extends Component {\r\n  state = {\r\n    companyName: \"\",\r\n    controls: {\r\n      firstName: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        validations: {\r\n          required: true,\r\n        },\r\n        error: null,\r\n      },\r\n      lastName: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        validations: {\r\n          required: true,\r\n        },\r\n        error: null,\r\n      },\r\n      email: {\r\n        value: \"\",\r\n        valid: true,\r\n      },\r\n      address1: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        validations: {\r\n          required: true,\r\n        },\r\n        error: null,\r\n      },\r\n      address2: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        validations: {\r\n          required: true,\r\n        },\r\n        error: null,\r\n      },\r\n      cpc: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        validations: {\r\n          required: true,\r\n        },\r\n        error: null,\r\n      },\r\n      st: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        validations: {\r\n          required: true,\r\n        },\r\n        error: null,\r\n      },\r\n      postalCode: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        validations: {\r\n          required: true,\r\n          patterns: [/^(\\d+-?)+\\d+$/],\r\n        },\r\n        error: null,\r\n      },\r\n      country: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        validations: {\r\n          required: true,\r\n        },\r\n        error: null,\r\n      },\r\n    },\r\n    // email: \"\",\r\n    // wallet_address: \"\",\r\n    // amount_to_receive: \"\",\r\n    loading: false,\r\n    error: null,\r\n    modal: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n    if (this.props.email) {\r\n      const controls = { ...this.state.controls };\r\n      const emailControl = { ...controls[\"email\"] };\r\n      emailControl.value = this.props.email;\r\n      controls[\"email\"] = emailControl;\r\n      this.setState({\r\n        controls: controls,\r\n        uuid: this.props.uuid,\r\n        companyName: this.props.uuid\r\n      });\r\n    }\r\n  }\r\n\r\n  isValidated() {\r\n    return true;\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const controls = { ...this.state[\"controls\"] };\r\n    const control = { ...controls[e.target.name] };\r\n    control.value = e.target.value;\r\n    control.touched = true;\r\n    control.valid = this.validateField(control);\r\n    controls[e.target.name] = control;\r\n    console.log(controls[e.target.name]);\r\n    console.log(controls);\r\n    this.setState({\r\n      controls: controls,\r\n    });\r\n  };\r\n\r\n  handleChangeCountry = (event) => {\r\n    const value = event.value;\r\n    const controls = { ...this.state[\"controls\"] };\r\n    const control = { ...controls[\"country\"] };\r\n    control.valid = true;\r\n    control.value = event;\r\n    control.touched = true;\r\n    controls[\"country\"] = control;\r\n    console.log(controls);\r\n    this.setState({\r\n      controls: controls,\r\n    });\r\n  };\r\n\r\n  validateField = (control) => {\r\n    const value = control.value;\r\n    let isValid = true;\r\n    const validations = control.validations;\r\n    if (!validations) return true;\r\n    if (validations.required) {\r\n      isValid = isValid && !!value;\r\n    }\r\n    if (validations.email) {\r\n      isValid = isValid && /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/.test(value);\r\n    }\r\n    if (validations.minValue) {\r\n      isValid = isValid && !isNaN(value) && value >= validations.minValue;\r\n    }\r\n    if (validations.date) {\r\n      console.log(new Date(value), \" date \");\r\n      isValid =\r\n        isValid &&\r\n        new Date(value) !== \"Invalid Date\" &&\r\n        !isNaN(new Date(value));\r\n    }\r\n    if (validations.minLength) {\r\n      // ^\\d+(?:-\\d+)*$\r\n      isValid = isValid && value.length >= validations.minLength;\r\n    }\r\n    if (validations.length) {\r\n      isValid = isValid && value.length == validations.length;\r\n    }\r\n    if (validations.patterns) {\r\n      validations.patterns.forEach((pattern) => {\r\n        isValid = isValid && pattern.test(value);\r\n      });\r\n    }\r\n\r\n    if (validations.custom && validations.custom.length > 0) {\r\n      validations.custom.forEach((customValidator) => {\r\n        isValid = isValid && customValidator(value);\r\n      });\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  isFormValid = () => {\r\n    let isValid = true;\r\n    for (const control in this.state.controls) {\r\n      isValid = isValid && this.state.controls[control].valid;\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  handleSubmitKYC = (event) => {\r\n    event.preventDefault();\r\n    const { controls, uuid, companyName } = this.state;\r\n    console.log(companyName);\r\n    console.log(\"kyc submitted \", this.state.controls);\r\n    console.log(localStorage.getItem('uuid'));\r\n    // localStorage.setItem('uuid',uuid);\r\n    // return;\r\n    const body = {\r\n      firstName: controls.firstName.value,\r\n      lastName: controls.lastName.value,\r\n      email: controls.email.value,\r\n      companyName: companyName,\r\n      address1: controls.address1.value,\r\n      address2: controls.address2.value,\r\n      CPC: controls.cpc.value,\r\n      ST: controls.st.value,\r\n      postalCode: controls.postalCode.value,\r\n      country: controls.country.value.value,\r\n    };\r\n    console.log(\"body KYC\",body);\r\n    this.setState({loading:true});\r\n    postSubmitUserKyc(body)\r\n      .then((response) => {\r\n        if(response.error && response.code === 400){\r\n          this.setState({loading: false});\r\n          alert('Session Expired');\r\n          localStorage.clear();\r\n          this.props.jumpToStep(0);\r\n        }\r\n        else if(response.error){\r\n          this.setState({loading: false});\r\n          console.log(response)\r\n          return;\r\n        }\r\n        console.log(response);\r\n        this.setState({loading:false})\r\n        console.log(localStorage.getItem('uuid'));\r\n        // this.setState({modal: true});\r\n\r\n        localStorage.setItem('kycVerification', response.data.url);\r\n        document.getElementById('modalTrigger').click();\r\n\r\n        // if(window.confirm(`Do you want to Verify now?`)){\r\n\r\n        // }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({loading:false})\r\n        console.error(error);\r\n      });\r\n  };\r\n  handlePopup=()=>{\r\n\r\n          localStorage.setItem('kyc','true');\r\n           window.location.href = localStorage.getItem('kycVerification');\r\n  }\r\n  render() {\r\n    console.log(this.state.controls);\r\n    \r\n    return (\r\n      <div className=\"wizard-step text-left\">\r\n        <Form onSubmit={this.handleSubmitKYC}>\r\n          <Row>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <FormLabel>\r\n                  First Name<span className=\"text-danger\">*</span>\r\n                </FormLabel>\r\n                <FormControl\r\n                  type=\"text\"\r\n                  name=\"firstName\"\r\n                  placeholder=\"John\"\r\n                  value={this.state.controls.firstName.value}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <FormLabel>\r\n                  Last Name<span className=\"text-danger\">*</span>\r\n                </FormLabel>\r\n                <FormControl\r\n                  type=\"text\"\r\n                  name=\"lastName\"\r\n                  placeholder=\"Doe\"\r\n                  value={this.state.controls.lastName.value}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <FormLabel>\r\n                  Email<span className=\"text-danger\">*</span>\r\n                </FormLabel>\r\n                <FormControl\r\n                  style={{ backgroundColor: \"#edeaea\" }}\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  placeholder=\"example@email.com\"\r\n                  value={this.state.controls.email.value}\r\n                  disabled\r\n                  onChange={this.handleChange}\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <FormLabel>\r\n                  Address 1<span className=\"text-danger\">*</span>\r\n                </FormLabel>\r\n                <FormControl\r\n                  type=\"text\"\r\n                  name=\"address1\"\r\n                  placeholder=\"123 Main St\"\r\n                  value={this.state.controls.address1.value}\r\n                  onChange={this.handleChange}\r\n                  autoComplete=\"off\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <FormLabel>\r\n                  Address 2<span className=\"text-danger\">*</span>\r\n                </FormLabel>\r\n                <FormControl\r\n                  type=\"text\"\r\n                  name=\"address2\"\r\n                  placeholder=\"5G\"\r\n                  value={this.state.controls.address2.value}\r\n                  onChange={this.handleChange}\r\n                  autoComplete=\"off\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <FormLabel>\r\n                  CPC<span className=\"text-danger\">*</span>\r\n                </FormLabel>\r\n                <FormControl\r\n                  type=\"text\"\r\n                  name=\"cpc\"\r\n                  placeholder=\"NYC\"\r\n                  value={this.state.controls.cpc.value}\r\n                  onChange={this.handleChange}\r\n                  autoComplete=\"off\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <FormLabel>\r\n                  St.<span className=\"text-danger\">*</span>\r\n                </FormLabel>\r\n                <FormControl\r\n                  type=\"text\"\r\n                  name=\"st\"\r\n                  placeholder=\"NY\"\r\n                  value={this.state.controls.st.value}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <FormLabel>\r\n                  Postal Code<span className=\"text-danger\">*</span>\r\n                </FormLabel>\r\n                <FormControl\r\n                  type=\"text\"\r\n                  name=\"postalCode\"\r\n                  placeholder=\"11201\"\r\n                  value={this.state.controls.postalCode.value}\r\n                  onChange={this.handleChange}\r\n                />\r\n                <small\r\n                  className=\"form-text text-muted \"\r\n                  style={{ fontWeight: 400 }}\r\n                >\r\n                  Numeric postal code with/without dashes (898343 , 444-555)\r\n                </small>\r\n              </FormGroup>\r\n            </Col>\r\n\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <FormLabel>\r\n                  Country<span className=\"text-danger\">*</span>\r\n                </FormLabel>\r\n                <Select\r\n                  name=\"country\"\r\n                  value={this.state.controls.country.value}\r\n                  options={countryList.map((country) => ({\r\n                    value: country,\r\n                    label: country,\r\n                  }))}\r\n                  onChange={this.handleChangeCountry}\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          {this.state.loading && (\r\n          <div className=\"spinner-container\">\r\n            <div className=\"spinner\">\r\n              {/* <Spinner animation=\"border\" role=\"status\" variant=\"light\">\r\n                       <span className=\"sr-only\">Loading...</span>\r\n                 </Spinner> */}\r\n              <Loader />\r\n              {/* <img src=\"https://i.pinimg.com/originals/59/22/20/5922208e18658f5e83b6ad801b895f71.gif\" />  */}\r\n            </div>\r\n          </div>\r\n        )}\r\n          <div className=\"footer-items w-100 mt-5\">\r\n            <div className=\"copyright-container\">\r\n            <img src={credentials.logo} className=\"copyright-logo\" alt=\"Logo\" style={{marginRight:20}} />\r\n            <h6>© {credentials.title}. All rights reserved</h6></div>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => this.props.jumpToStep(0)}\r\n              className=\"btn btn-prev  btn-fill pull-right btn-wd d-none\"\r\n            >\r\n              Previous\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              disabled={!this.isFormValid() || this.state.error}\r\n              className=\"btn  btn-primary pull-right btn-wd\"\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n        </Form>\r\n               \r\n               <Popup\r\n               trigger={<button className=\"btn btn-default btn-prev\" style={{display: \"none\"}} id=\"modalTrigger\" > Open Modal </button>}\r\n               modal\r\n               nested\r\n             >\r\n               {close => (\r\n                 <div className=\"modal1\">\r\n                   {/* <button className=\"close\" onClick={close}>\r\n                     &times;\r\n                   </button> */}\r\n                   <div className=\"header heading-transaction\" style={{paddingBottom: '15px'}}>You will be redirected to Fully Verified for KYC</div>\r\n\r\n                   <div className=\"actions\" style={{paddingTop: '50px'}}>\r\n                   <button className=\"btn btn-default\" style={{borderRadius: '4px'}} onClick={this.handlePopup}> Proceed </button>\r\n                   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                     <button\r\n                       className=\"btn btn-default\" style={{borderRadius: '4px'}}\r\n                       onClick={() => {\r\n                         console.log('modal closed ');\r\n                         close();\r\n                         this.props.jumpToStep(0);\r\n                       }}\r\n                     >\r\n                       Cancel\r\n                     </button>\r\n                   </div>\r\n                 </div>\r\n               )}\r\n             </Popup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Step2 extends React.Component {\r\n  state = {\r\n    kyc_approved: null,\r\n    transaction_summary: null,\r\n    controls: {\r\n      firstName: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        validations: {\r\n          required: true,\r\n        },\r\n        error: null,\r\n      },\r\n      lastName: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        validations: {\r\n          required: true,\r\n        },\r\n        error: null,\r\n      },\r\n      cardNumber: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        error: null,\r\n        validations: {\r\n          required:true,\r\n          minLength: 10\r\n        }\r\n      },\r\n      expiryDate: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        validations: {\r\n          required: true,\r\n          date: true,\r\n        },\r\n        error: null,\r\n      },\r\n      cvv: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        validations: {\r\n          required: true,\r\n          length: 3,\r\n        },\r\n        error: null,\r\n      },\r\n    },\r\n    loading: false,\r\n    error: null,\r\n    htmlScript:\"\",\r\n    ipAddress : \"127.0.0.1\"\r\n  };\r\n\r\n\r\n\r\n  componentDidMount(){\r\n    publicIp.v4().then(ip=>{\r\n      this.setState({ipAddress: ip});\r\n    });\r\n\r\n      const uuid = this.props.uuid;\r\n      console.log(uuid , \" \",this.props);\r\n      getTransferDetailsForRequestUUID(uuid, config.CompanyUuid).then(response=>{\r\n        if(response.error && response.code === 400){\r\n          this.setState({loading: false});\r\n          alert('Session Expired');\r\n          localStorage.clear();\r\n          this.props.jumpToStep(0);\r\n        }\r\n        else if(response.error){\r\n          this.setState({loading: false});\r\n          console.log(response)\r\n          return;\r\n        }\r\n        const data = response.result;\r\n        console.log(data);\r\n        const transactionSummary = {\r\n          token: data.quoteCurrency,\r\n          totalCharge: data.finalPrice,\r\n          totalToRecieve: data.quotePrice,\r\n          tx: data.markupFee,\r\n          wallet: data.wallet,\r\n          ...data,\r\n        };\r\n        console.log(transactionSummary);\r\n\r\n        postUserKyc(data.email).then((res) => {\r\n          if(res.error && response.code === 400){\r\n            alert('Session Expired');\r\n            localStorage.clear();\r\n            this.props.jumpToStep(0);\r\n          }\r\n          else if(res.error){\r\n            console.log(response)\r\n            return;\r\n          }\r\n          console.log(res);\r\n          const kycData = res.data.records;\r\n          let kycStatus;\r\n          if (kycData.length == 0) {\r\n            kycStatus = \"UNAVAILABLE\";\r\n          } else {\r\n            if (kycData[0].status == \"approved\") {\r\n              kycStatus = \"APPROVED\";\r\n            }\r\n            else if (kycData[0].status == \"pending\") {\r\n              kycStatus = \"PENDING\";\r\n            }\r\n            else{\r\n              kycStatus = \"UNAVAILABLE\";\r\n            }\r\n          }\r\n          this.setState({\r\n            transaction_summary: transactionSummary,\r\n            kyc_approved: kycStatus,\r\n          });\r\n          \r\n        });\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n  isValidated() {}\r\n\r\n  onClickStepBack = () => {\r\n    this.props.jumpToStep(0);\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    console.log(\"handleChangeCallec \", e);\r\n    const controls = { ...this.state[\"controls\"] };\r\n    const control = { ...controls[e.target.name] };\r\n    control.value = e.target.value;\r\n    control.touched = true;\r\n    control.valid = this.validateField(control);\r\n    controls[e.target.name] = control;\r\n    console.log(controls[e.target.name]);\r\n    console.log(controls);\r\n    this.setState({\r\n      controls: controls,\r\n    });\r\n  };\r\n\r\n  validateField = (control) => {\r\n    const value = control.value;\r\n    let isValid = true;\r\n    const validations = control.validations;\r\n    if (!validations) return true;\r\n    if (validations.required) {\r\n      isValid = isValid && !!value;\r\n    }\r\n    if (validations.email) {\r\n      isValid = isValid && /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/.test(value);\r\n    }\r\n    if (validations.minValue) {\r\n      isValid = isValid && !isNaN(value) && value >= validations.minValue;\r\n    }\r\n    if (validations.date) {\r\n      console.log(new Date(value), \" date \");\r\n      isValid =\r\n        isValid &&\r\n        new Date(value) !== \"Invalid Date\" &&\r\n        !isNaN(new Date(value));\r\n    }\r\n    if (validations.minLength) {\r\n      // ^\\d+(?:-\\d+)*$\r\n      isValid = isValid && value.length >= validations.minLength;\r\n    }\r\n    if (validations.length) {\r\n      isValid = isValid && value.length == validations.length;\r\n    }\r\n\r\n    if (validations.custom && validations.custom.length > 0) {\r\n      validations.custom.forEach((customValidator) => {\r\n        isValid = isValid && customValidator(value);\r\n      });\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  isFormValid = () => {\r\n    let isValid = true;\r\n    for (const control in this.state.controls) {\r\n      isValid = isValid && this.state.controls[control].valid;\r\n    }\r\n    // isValid = this.isValid && this.state.kyc_approved;\r\n    return isValid;\r\n  };\r\n\r\n  handleSubmit = () => {\r\n    // event.preventDefault();\r\n    console.log(this.state);\r\n    const { controls, transaction_summary: transactionSummary } = this.state;\r\n    const expiry =\r\n      controls.expiryDate.value.split(\"-\")[1] +\r\n      \"/\" +\r\n      controls.expiryDate.value.split(\"-\")[0].substr(2);\r\n\r\n    if(parseInt(controls.expiryDate.value.split(\"-\")[1]) < (new Date().getMonth()+1) && parseInt(controls.expiryDate.value.split(\"-\")[0].substr(2)) <= parseInt(new Date().getFullYear().toString().substr(2))){\r\n      alert('Card Expired');\r\n      return;\r\n    }\r\n    const body = {\r\n      // amount: (transactionSummary.originalPurchasedPrice * 100) + (this.cal__Fee().toFixed(2) * 100),\r\n      amount: transactionSummary.originalPurchasedPrice * 100,\r\n      company_uuid: transactionSummary.companyUUID,\r\n      first_name: controls.firstName.value,\r\n      last_name: controls.lastName.value,\r\n      email: transactionSummary.email,\r\n      address_ip: this.state.ipAddress,\r\n      currency: \"USD\",\r\n      card_number: controls.cardNumber.value,\r\n      expiry_date: expiry,\r\n      cvc2: controls.cvv.value,\r\n      auto_clear: true,\r\n      transaction_status: true,\r\n      request_uuid: this.props.uuid ,\r\n      redirect_url: config.RedirectUrl,\r\n      crypto_transfer: true,\r\n      kyc_delayed: true,\r\n      wallet: transactionSummary.wallet\r\n    }\r\n    console.log(body);\r\n    this.setState({loading:true})\r\n    getCheckEnrolledCard(body.card_number).then(response=>{\r\n      if(response.error && response.code === 400){\r\n        this.setState({loading: false});\r\n        alert('Session Expired');\r\n        localStorage.clear();\r\n        this.props.jumpToStep(0);\r\n      }\r\n      else if(response.error){\r\n        this.setState({loading: false});\r\n        console.log(response)\r\n        return;\r\n      }\r\n      if(response.enrolledStatus==\"Y\"){\r\n        // return postPayment(body)\r\n        postPayment(body).then( paymentResponse =>{\r\n\r\n          console.log(paymentResponse);\r\n          if(!paymentResponse.error){\r\n            localStorage.setItem('paymentRequest','pending');\r\n            const htmlScriptDecoded =  Base64.decode(paymentResponse.formBase64);\r\n            ReactDOM.render(renderHTML(htmlScriptDecoded),document.getElementById('app'));\r\n            console.log(\"decoded form\", htmlScriptDecoded);\r\n             this.setState({htmlScript:htmlScriptDecoded,loading:false},()=>{\r\n               console.log(\"<<<<State script>>>\",this.state.htmlScript);\r\n             });\r\n             \r\n             setTimeout(() =>{\r\n               document.downloadForm.submit();\r\n             }, 500); \r\n          }     \r\n          else{\r\n            this.setState({loading: false});\r\n            if(paymentResponse.code === 400){\r\n              localStorage.removeItem('newToken');\r\n              this.props.jumpToStep(0);\r\n            }\r\n            else if(paymentResponse.code == 422){\r\n                  this.props.jumpToStep(0);\r\n            }\r\n          }     \r\n        });\r\n        \r\n      }\r\n      else {\r\n        this.setState({loading:false})\r\n        alert(\"This card is not 3DS secure Enrolled, Please use another form of payment\");\r\n        // this.props.setStepState(this.props.stepIndex , {\r\n        //   paymentSuccess : false,\r\n        //   paymentError : \"3DS Is Not Verified\"\r\n        // });\r\n        // this.props.jumpToStep(3);\r\n        // throw new Error(\"3DS Is Not Verified\");\r\n      }\r\n    }).then(response=>{\r\n      this.setState({loading:false})\r\n      this.props.setStepState(this.props.stepIndex , {\r\n          paymentSuccess : true,\r\n          paymentError : null\r\n      })\r\n      // this.props.jumpToStep(3);\r\n    })\r\n    .catch(error=>{\r\n      this.setState({loading:false})\r\n      console.log(error.message);\r\n      // if(error.message==\"Reqeust uuid alread exists.\"){\r\n      //   this.props.setStepState(this.props.stepIndex  , {\r\n      //      paymentSuccess : true,\r\n      //      paymentError : null\r\n      //   })\r\n      //   this.props.jumpToStep(3);\r\n      // }\r\n    })\r\n  }\r\n  cal__Fee = () => {\r\n    // alert('coming');\r\n      let price= this.state.transaction_summary.originalPurchasedPrice;\r\n      let fee = (price*3.5)/100;\r\n      if(fee < 4.99){\r\n         fee = 4.99;\r\n\r\n         return fee;\r\n      }else{\r\n         return fee;\r\n      }\r\n  }\r\n  render() {\r\n    const {\r\n      controls: { firstName, lastName, cardNumber, cvv, expiryDate },\r\n      transaction_summary,\r\n    } = this.state;\r\n    console.log(transaction_summary);\r\n    const statusClasses = [\"transaction-details-col\"];\r\n\r\n    if (this.state.kyc_approved !== null) {\r\n      if (this.state.kyc_approved == \"APPROVED\") {\r\n        statusClasses.push(\"green-box\");\r\n      } else if (this.state.kyc_approved == \"PENDING\") {\r\n        statusClasses.push(\"red-box\");\r\n      } else if (this.state.kyc_approved == \"UNAVAILABLE\") {\r\n        statusClasses.push(\"gray-box\");\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"wizard-step\">\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Row style={{ opacity: 0 }}>\r\n            <Col md={6}>13</Col>\r\n            <Col md={6}>13</Col>\r\n          </Row>\r\n          <Row>\r\n            <Col\r\n              md={6}\r\n              mdOffset={1}\r\n              style={{ padding: \"25px\", color: \"black\" }}\r\n            >\r\n              <h5 className=\"text-center heading-transaction\">\r\n                Transaction Summary\r\n              </h5>\r\n              {this.state.transaction_summary && (\r\n                <div className=\"transaction-summary\">\r\n                  <div className=\"transaction-details-col\">\r\n                    <p>Token </p>\r\n                    <p>{this.state?.transaction_summary?.token}</p>\r\n                    <p>Purchase Amount</p>\r\n                    <p>{this.state?.transaction_summary?.originalPurchasedPrice?.toFixed(2)}</p>\r\n                    <p>TX Fee</p>\r\n                    <p>{this.cal__Fee().toFixed(2)}</p>\r\n                    <p>Amount Charged To Card</p>\r\n                    <p>{(this.state?.transaction_summary?.originalPurchasedPrice + this.cal__Fee()).toFixed(2)}</p>                    \r\n                    <p>Net Amount Transferred</p>\r\n                    <p>{this.state?.transaction_summary?.quantity?.toFixed(2)}</p>                     \r\n\r\n                    {/* <p>Total to receive</p>\r\n                    <p>{this.state.transaction_summary.totalToRecieve}</p>\r\n                    <p>TX Fee</p>\r\n                    <p>{this.state.transaction_summary.tx} (Markup Fee)</p>\r\n                    <p>Total charge</p>\r\n                    <p>${this.state.transaction_summary.totalCharge}</p> */}\r\n                  </div>\r\n                  <div className=\"transaction-details-wallet\">\r\n                    <p>Wallet Address:</p>\r\n                    <p className=\"wallet-address\">\r\n                      {this.state.transaction_summary.wallet}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              {this.state.kyc_approved !== null && (\r\n                <div className={statusClasses.join(\" \")}>\r\n                  <p className=\"kyc-status\">KYC Status</p>\r\n                  <p className=\"kyc-status\">\r\n                    {this.state?.kyc_approved?.charAt(0)?.toUpperCase() +\r\n                      this.state?.kyc_approved?.slice(1)?.toLowerCase()}\r\n                  </p>\r\n                </div>\r\n              )}\r\n              <Row style={{ marginTop: \"20px\" }}></Row>\r\n            </Col>\r\n            <Col md={6} style={{ padding: \"25px\", textAlign: \"left\" }}>\r\n              <h5 className=\"text-center heading-transaction\">Card Details</h5>\r\n              <Row>\r\n                <Col md={6} mdOffset={1}>\r\n                  <FormGroup>\r\n                    <FormLabel>\r\n                      First Name <span className=\"text-danger\">*</span>\r\n                    </FormLabel>\r\n                    <FormControl\r\n                      type=\"text\"\r\n                      name=\"firstName\"\r\n                      placeholder=\"First Name\"\r\n                      value={firstName.value}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                    {this.state.emailError}\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col md={6} mdOffset={1}>\r\n                  <FormGroup>\r\n                    <FormLabel>\r\n                      Last Name <span className=\"text-danger\">*</span>\r\n                    </FormLabel>\r\n                    <FormControl\r\n                      type=\"text\"\r\n                      name=\"lastName\"\r\n                      placeholder=\"Last Name\"\r\n                      value={lastName.value}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                    {this.state.emailError}\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col md={12}>\r\n                  <FormGroup>\r\n                    <FormLabel>\r\n                      Card Number <span className=\"text-danger\">*</span>\r\n                    </FormLabel>\r\n                    <FormControl\r\n                      type=\"number\"\r\n                      name=\"cardNumber\"\r\n                      placeholder=\"Card Number\"\r\n                      value={cardNumber.value}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                    <small\r\n                      className=\"form-text text-muted \"\r\n                      style={{ fontWeight: 400 }}\r\n                    >\r\n                      Minimum Number of 10 digits\r\n                    </small>\r\n                    {this.state.emailError}\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col md={6} mdOffset={1}>\r\n                  <FormGroup>\r\n                    <FormLabel>\r\n                      Exp Date <span className=\"text-danger\">*</span>\r\n                    </FormLabel>\r\n                    <FormControl\r\n                      type=\"month\"\r\n                      name=\"expiryDate\"\r\n                      placeholder=\"Expiry Date\"\r\n                      value={expiryDate.value}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                    {this.state.emailError}\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col md={6} mdOffset={1}>\r\n                  <FormGroup>\r\n                    <FormLabel>\r\n                      CVV <span className=\"text-danger\">*</span>\r\n                    </FormLabel>\r\n                    <FormControl\r\n                      type=\"number\"\r\n                      name=\"cvv\"\r\n                      placeholder=\"CVV\"\r\n                      minLength={3}\r\n                      maxLength={3}\r\n                      min={1}\r\n                      value={cvv.value}\r\n                      onChange={this.handleChange}\r\n                    />\r\n                    <small\r\n                      className=\"form-text text-muted \"\r\n                      style={{ fontWeight: 400 }}\r\n                    >\r\n                      3 digits CVV\r\n                    </small>\r\n                    {this.state.emailError}\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        {this.state.loading && (\r\n          <div className=\"spinner-container\">\r\n            <div className=\"spinner\">\r\n              {/* <Spinner animation=\"border\" role=\"status\" variant=\"light\">\r\n                       <span className=\"sr-only\">Loading...</span>\r\n                 </Spinner> */}\r\n              <Loader />\r\n              {/* <img src=\"https://i.pinimg.com/originals/59/22/20/5922208e18658f5e83b6ad801b895f71.gif\" />  */}\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div id=\"app\"/>\r\n        {/* <div dangerouslySetInnerHTML={{__html:this.state.htmlScript}}/> */}\r\n        <div className=\"footer-items w-100 mt-5\">\r\n          <div className=\"copyright-container\">\r\n            <img\r\n              src={credentials.logo}\r\n              className=\"copyright-logo\"\r\n              alt=\"Logo\"\r\n              style={{ marginRight: 20 }}\r\n            />\r\n            <h6>© {credentials.title}. All rights reserved</h6>\r\n          </div>\r\n          <div>\r\n            <button\r\n              onClick={this.onClickStepBack}\r\n              className=\"btn btn-default btn-prev\"\r\n              style={{ marginRight: 5 }}\r\n            >\r\n              Previous\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                if (this.isFormValid()) {\r\n                  this.handleSubmit();\r\n                }\r\n              }}\r\n              disabled={!this.isFormValid()}\r\n              type=\"submit\"\r\n              className=\"btn  btn-primary \"\r\n            >\r\n              Pay Now\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Step3 extends Component {\r\n  state = {\r\n    alert: null,\r\n    paymentDetails: null,\r\n    transaction_summary: null,\r\n    ipAddress: \"\",\r\n    locationInfo: {},\r\n    loading:false\r\n  };\r\n\r\n\r\n  \r\n  isValidated() {\r\n    return true;\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.setState({loading:true})\r\n    publicIp.v4().then(ip=>{\r\n      return getIpLocationInfo(ip).then((locationInfo)=>{\r\n        console.log(locationInfo);\r\n        this.setState({\r\n          ipAddress: ip,\r\n          locationInfo: locationInfo\r\n        });\r\n        return {\r\n          ipAddress: ip,\r\n          locationInfo: locationInfo\r\n        }\r\n      });\r\n    }).\r\n    then(location=>{\r\n      console.log(\"object\",location);\r\n\r\n      getTransferDetailsForRequestUUID(this.props.uuid , config.CompanyUuid).then((response)=>{\r\n        if(response.error && response.code === 400){\r\n          this.setState({loading: false});\r\n          alert('Session Expired');\r\n          localStorage.clear();\r\n          this.props.jumpToStep(0);\r\n        }\r\n        else if(response.error){\r\n          this.setState({loading: false});\r\n          console.log(response)\r\n          return;\r\n        }\r\n        const data = response.result;\r\n        console.log(data);\r\n        const transactionSummary = {\r\n          token: data.quoteCurrency,\r\n          totalCharge: data.finalPrice,\r\n          totalToRecieve: data.quotePrice,\r\n          tx: data.markupFee,\r\n          wallet: data.wallet,\r\n          ...data,\r\n        };\r\n        console.log(transactionSummary);\r\n        this.setState({\r\n          transaction_summary: transactionSummary\r\n        },()=>{\r\n          this.setState({loading:false})\r\n            // send appropriate email\r\n        // change email to transactionSummary.email later\r\n          let subject = \"\";\r\n          let type = \"\";\r\n          if(transactionSummary.status === \"DECLINED\"){\r\n            subject = \"Transaction Rejected\";\r\n            type = \"PAYMENT_TRANSFER_REJECTED\";\r\n          }\r\n          else if(transactionSummary.status === \"APPROVED\"){\r\n            subject = \"Transaction Completed\";\r\n            type = \"PAYMENT_TRANSFER_APPROVED\";\r\n          }\r\n          else{\r\n            subject = \"Transaction Pending\";\r\n            type = \"TRANSACTION_PENDING\";\r\n          }\r\n\r\n          let emailBody = {\r\n            email: transactionSummary.email,\r\n            datetime: this.convertDate(transactionSummary.updatedAt),\r\n            ip: location.ipAddress,\r\n            amount:(transactionSummary.quantity.toFixed(2)).toString(),\r\n            fee: (this.cal__Fee().toFixed(2)).toString(),\r\n            wallet: transactionSummary.wallet,\r\n            hash: transactionSummary.txId ? transactionSummary.txId : \"\",\r\n            location:  location.locationInfo.city ? location.locationInfo.city+', '+location.locationInfo.country_name : \"\"\r\n          };\r\n\r\n          \r\n          setTimeout(()=>{\r\n\r\n            emailBody.fee = ( this.cal__Fee().toFixed(2)).toString();\r\n            console.log(subject, type, emailBody);\r\n            // transactionSummary.email\r\n            sendTransactionEmail(transactionSummary.email, subject, type,  emailBody);\r\n          }, 300);\r\n          \r\n        \r\n  \r\n        });//setState callback closed\r\n      \r\n     \r\n  \r\n        postUserKyc(this.props.email).then(res=>{\r\n          if(res.error && response.code === 400){\r\n            alert('Session Expired');\r\n            localStorage.clear();\r\n            this.props.jumpToStep(0);\r\n          }\r\n          else if(res.error){\r\n            console.log(response)\r\n            return;\r\n          }\r\n          const kycData = res.data.records;\r\n          let kycStatus;\r\n          if(kycData.length==0){\r\n            kycStatus = \"UNAVAILABLE\" ;\r\n          }\r\n          else {\r\n            if(kycData[0].status==\"approved\"){\r\n              kycStatus = \"APPROVED\" ;\r\n            }\r\n            if(kycData[0].status==\"pending\"){\r\n              kycStatus = \"PENDING\" ;\r\n            }\r\n          }\r\n          this.setState({\r\n            paymentDetails: response.result,\r\n            kyc_approved : kycStatus,\r\n           \r\n          });   \r\n         });\r\n      }).catch(error=>console.error(error))\r\n\r\n\r\n\r\n    }).\r\n    catch(e=>{\r\n      console.log(\"inside error\")\r\n      console.error(e);\r\n\r\n      getTransferDetailsForRequestUUID(this.props.uuid , config.CompanyUuid).then((response)=>{\r\n        if(response.error && response.code === 400){\r\n          this.setState({loading: false});\r\n          alert('Session Expired');\r\n          localStorage.clear();\r\n          this.props.jumpToStep(0);\r\n        }\r\n        else if(response.error){\r\n          this.setState({loading: false});\r\n          console.log(response)\r\n          return;\r\n        }\r\n        const data = response.result;\r\n        console.log(data);\r\n        const transactionSummary = {\r\n          token: data.quoteCurrency,\r\n          totalCharge: data.finalPrice,\r\n          totalToRecieve: data.quotePrice,\r\n          tx: data.markupFee,\r\n          wallet: data.wallet,\r\n          ...data,\r\n        };\r\n        console.log(transactionSummary);\r\n        this.setState({\r\n          transaction_summary: transactionSummary\r\n        },()=>{\r\n            // send appropriate email\r\n        // change email to transactionSummary.email later\r\n        let subject = \"\";\r\n        let type = \"\";\r\n        if(transactionSummary.status === \"DECLINED\"){\r\n          subject = \"Transaction Rejected\";\r\n          type = \"PAYMENT_TRANSFER_REJECTED\";\r\n        }\r\n        else if(transactionSummary.status === \"APPROVED\"){\r\n          subject = \"Transaction Completed\";\r\n          type = \"PAYMENT_TRANSFER_APPROVED\";\r\n        }\r\n        else{\r\n          subject = \"Transaction Pending\";\r\n          type = \"TRANSACTION_PENDING\";\r\n        }\r\n  \r\n        let emailBody = {\r\n          email: transactionSummary.email,\r\n          datetime: this.convertDate(transactionSummary.updatedAt),\r\n          ip: \"\",\r\n          amount:(transactionSummary.quantity.toFixed(2)).toString(),\r\n          fee:(this.cal__Fee().toFixed(2)).toString(),\r\n          wallet: transactionSummary.wallet,\r\n          hash: transactionSummary.txId ? transactionSummary.txId : \"\",\r\n          location: \"\"\r\n        };\r\n  \r\n        setTimeout(()=>{\r\n\r\n          emailBody.fee = ( this.cal__Fee().toFixed(2)).toString();\r\n          console.log(subject, type, emailBody);\r\n            // transactionSummary.email\r\n            sendTransactionEmail(transactionSummary.email, subject, type,  emailBody);        }, 300);    \r\n  \r\n        });//setState callback closed\r\n   \r\n     \r\n  \r\n        postUserKyc(this.props.email).then(res=>{\r\n          if(res.error && response.code === 400){\r\n            alert('Session Expired');\r\n            localStorage.clear();\r\n            this.props.jumpToStep(0);\r\n          }\r\n          else if(res.error){\r\n            console.log(response)\r\n            return;\r\n          }\r\n          const kycData = res.data.records;\r\n          let kycStatus;\r\n          if(kycData.length==0){\r\n            kycStatus = \"UNAVAILABLE\" ;\r\n          }\r\n          else {\r\n            if(kycData[0].status==\"approved\"){\r\n              kycStatus = \"APPROVED\" ;\r\n            }\r\n            if(kycData[0].status==\"pending\"){\r\n              kycStatus = \"PENDING\" ;\r\n            }\r\n          }\r\n          this.setState({\r\n            paymentDetails: response.result,\r\n            kyc_approved : kycStatus,\r\n           \r\n          });   \r\n         });\r\n      }).catch(error=>console.error(error))\r\n    })\r\n    \r\n  }\r\n  convertDate = (date) => {\r\n    const x = new Date(date);\r\n    return `${(x.getDate() < 10) ? ('0' + (x.getDate())) : x.getDate()}/${(x.getMonth() + 1) < 10 ? ('0' + (x.getMonth() + 1)) : (x.getMonth() + 1)}/${x.getFullYear()}`;\r\n  }\r\n  getSuccessContent = ()=>{\r\n    const statusClasses = [\"transaction-details-col\"];\r\n\r\n    if(this.state.kyc_approved!==null){\r\n      if(this.state.kyc_approved==\"APPROVED\"){\r\n        statusClasses.push(\"green-box\")\r\n     }\r\n     else if(this.state.kyc_approved==\"PENDING\"){\r\n       statusClasses.push(\"red-box\")\r\n     }\r\n     else if(this.state.kyc_approved==\"UNAVAILABLE\"){\r\n      statusClasses.push(\"gray-box\")\r\n     }\r\n    }\r\n\r\n    return <Row>\r\n    <Col md={6} mdOffset={1} style={{ padding: \"25px\",color:\"black\" }}>\r\n      <h5 className=\"text-center heading-transaction\">Transaction Summary</h5>\r\n      { this.state.paymentDetails  && <><div className=\"transaction-summary\">\r\n              <div className=\"transaction-details-col\">\r\n                   <p>Token </p>\r\n                    <p>{this.state.transaction_summary.token}</p>\r\n                    <p>Amount of (token) Being Purchased</p>\r\n                    <p>{this.state.transaction_summary.originalPurchasedPrice.toFixed(2)}</p>\r\n                    <p>Fees Paid</p>\r\n                    <p>{this.cal__Fee().toFixed(2)}</p>\r\n                    <p>Amount to be Charged</p>\r\n                    <p>{(this.state.transaction_summary.originalPurchasedPrice + this.cal__Fee()).toFixed(2)}</p>                    \r\n                    <p>Net Amount to be Transferred</p>\r\n                    <p>{this.state.transaction_summary.quantity.toFixed(2)}</p> \r\n              </div>\r\n              <div className=\"transaction-details-wallet\">\r\n                <p>Wallet Address:</p>\r\n                <p className=\"wallet-address\">\r\n                  {this.state.paymentDetails.wallet}\r\n                </p>\r\n              </div>\r\n      </div>\r\n      <div className={statusClasses.join(\" \")}>\r\n        <p className=\"kyc-status\" >{}KYC Status</p>\r\n        <p className=\"kyc-status\" >{this.state.kyc_approved}</p>\r\n      </div></> \r\n      }\r\n    </Col>\r\n    <Col md={6} style={{ padding: \"25px\" }}>\r\n      {this.state.paymentDetails && <>\r\n        <h5 className=\"text-center\"><span className=\"heading-transaction\">Transaction status:</span> {this.state.paymentDetails.status}</h5>\r\n      <Row>\r\n        <Col md={12} mdOffset={1}>\r\n      {/* <p>TX id: {this.state.paymentDetails.txId}</p> */}\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ marginTop: \"30px\"}}>\r\n        <Col mdOffset={1}>\r\n        {this.state.paymentDetails.status!==\"DECLINED\"?(\r\n            <>\r\n            <p className=\"payment__Status\">Your transaction is ready to go and you will receive your funds within 5 minutes</p>\r\n            <br/>\r\n            {/* <p className=\"payment__Status\">Become an affiliate and earn cash back</p> */}\r\n            </>\r\n        ):\r\n        <p className=\"payment__Status\">Transaction is Declined, please try again</p>\r\n  }\r\n          \r\n          {/* <CustomButton>\r\n            Become an affiliate and earn cash back\r\n          </CustomButton> */}\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ marginTop: \"30px\" }}>\r\n        <Col mdOffset={1} style={{display:\"flex\",justifyContent:\"center\"}}>\r\n        {this.state.paymentDetails.status!==\"DECLINED\"?(\r\n          // <NavLink to=\"/auth/signup\">\r\n          <CustomButton>Sign Up</CustomButton>\r\n          // </NavLink>\r\n        ):\r\n        ( \r\n          // <NavLink to=\"/\">\r\n        <CustomButton onClick={this.handle__Purchase}>Submit New Purchase</CustomButton>\r\n        /* </NavLink> */\r\n        )\r\n\r\n        }\r\n          \r\n        </Col>\r\n      </Row>\r\n      </>}\r\n      \r\n    </Col>\r\n    <Col xs={12} style={{display:\"none\"}}>\r\n     { <div>\r\n        {\"//Offer ID - 7297449, Event - initial\"}\r\n        {\"----------------------------------------------\"}\r\n        {<img src=\"https://click.xport-digital.com/p?oid=7297449&mid=4745&t=i\" width=\"0px\" height=\"0px\" />}\r\n\r\n\r\n        {\"//Offer ID - 7297449, Event - Transfer2\"}\r\n        {\"----------------------------------------------\"}\r\n        {<img src=\"https://click.xport-digital.com/p?oid=7297449&mid=4745&event=t2r&t=i\" width=\"0px\" height=\"0px\" />}\r\n\r\n\r\n        {\"//Offer ID - 7297449, Event - Transfer3\"}\r\n        {\"----------------------------------------------\"}\r\n        {<img src=\"https://click.xport-digital.com/p?oid=7297449&mid=4745&event=t3r&t=i\" width=\"0px\" height=\"0px\" />}\r\n\r\n\r\n       {\"//Offer ID - 7297449, Event - Transfer4\"}\r\n       {\"----------------------------------------------\"}\r\n       {<img src=\"https://click.xport-digital.com/p?oid=7297449&mid=4745&event=t4r&t=i\" width=\"0px\" height=\"0px\" />}\r\n\r\n\r\n      {\"//Offer ID - 7297449, Event - Transfer5*\"}\r\n      {\"----------------------------------------------\"}\r\n      {<img src=\"https://click.xport-digital.com/p?oid=7297449&mid=4745&event=t5r&t=i\" width=\"0px\" height=\"0px\"/> }\r\n      </div>\r\n    } \r\n    </Col>\r\n  </Row>\r\n  }\r\n\r\n  getErrorContent = ()=>{\r\n    return <Row>\r\n      <Col sm={12}>\r\n            <h4 className=\"text-danger\">{this.props.paymentError}</h4>\r\n      </Col>\r\n    </Row>\r\n  }\r\n  cal__Fee = () => {\r\n    // alert('coming');\r\n      let price= this.state.transaction_summary.originalPurchasedPrice;\r\n      let fee = (price*3.5)/100;\r\n      if(fee < 4.99){\r\n         fee = 4.99;\r\n\r\n         return fee;\r\n      }else{\r\n         return fee;\r\n      }\r\n  }\r\n\r\n\r\n  handle__Purchase = () =>{\r\n\r\n    window.location.href = \"/?redirect=true\";\r\n    // this.context.router.push(\"/\");\r\n    // console.log(this.state.steps);\r\n    // this.props.setStepState(0, {\r\n    //   email: \"\"\r\n    // });\r\n\r\n    // this.props.jumpToStep(1);\r\n  }\r\n  render() {\r\n    \r\n    const {paymentSuccess , paymentError} = this.props;\r\n    return (\r\n      <div className=\"wizard-step\">\r\n        { true ? this.getSuccessContent() : this.getErrorContent()}\r\n        {/* <Row style={{ opacity: 0 }}>\r\n          <Col md={6}>13</Col>\r\n          <Col md={6}>13</Col>\r\n        </Row> */\r\n        }\r\n           {this.state.loading && (\r\n          <div className=\"spinner-container\">\r\n            <div className=\"spinner\">\r\n              {/* <Spinner animation=\"border\" role=\"status\" variant=\"light\">\r\n                       <span className=\"sr-only\">Loading...</span>\r\n                 </Spinner> */}\r\n              <Loader />\r\n              {/* <img src=\"https://i.pinimg.com/originals/59/22/20/5922208e18658f5e83b6ad801b895f71.gif\" />  */}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Wizard extends Component {\r\n  state = {\r\n    nextButtonText: \"Next\",\r\n    backButtonText: \"Back\",\r\n    steps: [\r\n      { name: \"Purchase\", component: <Step1 />, stepState: null },\r\n      { name: \"KYC\", component: <KYC />, stepState: null },\r\n      { name: \"Transaction Summary\", component: <Step2 />, stepState: null },\r\n      { name: \"Confirmation\", component: <Step3 />, stepState: null },\r\n    ],\r\n  };\r\n\r\n  componentDidMount() {\r\n    const div = document.createElement(\"div\");\r\n    div.classList.add(\"copyright-container\");\r\n    div.innerHTML = `<div className=\"copyright-container\" style=\"display:flex;flex-direction:row;align-items:center;text-align:center;justify-self:center\"><img src=\"${credentials.logo}\" className=\"copyright-logo\" alt=\"Logo\" style=\"margin-right:20px;\"/><h6>&copy; Xport Digital. All rights reserved</h6></div>`;\r\n    document\r\n      .getElementsByClassName(\"footer-buttons\")[0]\r\n      .insertBefore(div, document.getElementById(\"prev-button\"));\r\n  }\r\n\r\n  handleStepChange = (step) => {\r\n    switch (step) {\r\n      case 1:\r\n        this.setState({\r\n          nextButtonText: \"Pay Now\",\r\n          backButtonText: \"Back\",\r\n        });\r\n        break;\r\n      case 2:\r\n        this.setState({\r\n          homeButtonText: \"Exit\",\r\n        });\r\n        break;\r\n      default:\r\n        this.setState({\r\n          nextButtonText: \"Next\",\r\n          backButtonText: \"Back\",\r\n        });\r\n        break;\r\n    }\r\n  };\r\n\r\n  setStepState = (stepIndex, stepData) => {\r\n    const steps = { ...this.state.steps };\r\n    steps[stepIndex] = { ...steps[stepIndex] };\r\n    steps[stepIndex].stepState = stepData;\r\n    this.setState({\r\n      steps: steps,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    /*\r\n    const email = this.state.steps[0].stepState\r\n      ? this.state.steps[0].stepState.controls.email.value\r\n      : \"\";\r\n    const uuid = this.state.steps[0].stepState\r\n      ? this.state.steps[0].stepState.uuid\r\n      : null; //Request UUID\r\n    */\r\n\r\n    const email = this.state.steps[0].stepState ?  this.state.steps[0].stepState.controls.email.value : \"\";\r\n    const uuid =  this.state.steps[0].stepState ? this.state.steps[0].stepState.uuid : (localStorage.getItem('uuid') ? localStorage.getItem('uuid') : null); //Request UUID\r\n    const company_uuid =  this.state.steps[0].stepState ? this.state.steps[0].stepState.company_uuid : null; \r\n    const paymentSuccess  = this.state.steps[2].stepState ? this.state.steps[2].stepState.paymentSuccess : null; \r\n    const paymentError  = this.state.steps[2].stepState ? this.state.steps[2].stepState.paymentError : null;\r\n\r\n    console.log(uuid);\r\n    const stepswithData = {\r\n      ...this.state,\r\n      steps: [{ name: \"Purchase\", \r\n      component: <Step1 stepIndex={0} setStepState={this.setStepState}  stepState={this.state.steps[0].stepState} /> \r\n    },\r\n    { name: \"KYC\", \r\n      component: <KYC email={email} uuid={company_uuid} stepIndex={1} setStepState={this.setStepState} stepState={this.state.steps[1].stepState} />\r\n    },\r\n    { name: \"Transaction Summary\", \r\n      component: <Step2 stepIndex={2}  email={email}  uuid={uuid} setStepState={this.setStepState} stepState={this.state.steps[2].stepState} />\r\n    },\r\n    { name: \"Confirmation\", \r\n      component: <Step3 email={email} stepIndex={3} uuid={uuid} paymentSuccess={paymentSuccess} paymentError={paymentError} setStepState={this.setStepState} stepState={this.state.steps[3].stepState} />\r\n    }]\r\n    } \r\n\r\n    return (\r\n      <div className=\"main-content\">\r\n        \r\n              <Card\r\n                wizard\r\n                id=\"wizardCard\"\r\n                textCenter\r\n                // title=\"XPort Digital Crypto Gateway\"\r\n                content={\r\n                  <StepZilla\r\n                    steps={stepswithData.steps}\r\n                    stepsNavigation={false}\r\n                    // nextButtonCls=\"btn btn-prev btn-info btn-fill pull-right btn-wd\"\r\n                    // backButtonCls=\"btn btn-next btn-default btn-fill pull-left btn-wd\"\r\n                    onStepChange={this.handleStepChange}\r\n                    nextButtonText={this.state.nextButtonText}\r\n                    backButtonText={this.state.backButtonText}\r\n                    homeButtonText={this.state.homeButtonText}\r\n                    showNavigation={false}\r\n                  //  startAtStep={3}\r\n                  />\r\n                }\r\n              />\r\n        {/* <h1>TEST text</h1> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Wizard;","C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\config\\index.jsx",[],"C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\config\\config.js",[],"C:\\Users\\aaron\\xport-digital-sites\\xport_website_react\\src\\component\\Layouts\\Loader\\Loader.js",[],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":5,"column":19,"nodeType":"111","messageId":"112","endLine":5,"endColumn":34},{"ruleId":"109","severity":1,"message":"113","line":6,"column":10,"nodeType":"111","messageId":"112","endLine":6,"endColumn":24},{"ruleId":"109","severity":1,"message":"114","line":9,"column":9,"nodeType":"111","messageId":"112","endLine":9,"endColumn":18},{"ruleId":"109","severity":1,"message":"115","line":13,"column":3,"nodeType":"111","messageId":"112","endLine":13,"endColumn":12},{"ruleId":"109","severity":1,"message":"116","line":22,"column":3,"nodeType":"111","messageId":"112","endLine":22,"endColumn":10},{"ruleId":"109","severity":1,"message":"117","line":44,"column":3,"nodeType":"111","messageId":"112","endLine":44,"endColumn":14},{"ruleId":"109","severity":1,"message":"118","line":47,"column":3,"nodeType":"111","messageId":"112","endLine":47,"endColumn":12},{"ruleId":"119","severity":1,"message":"120","line":375,"column":47,"nodeType":"121","messageId":"122","endLine":375,"endColumn":48,"fix":"123"},{"ruleId":"124","severity":1,"message":"125","line":450,"column":23,"nodeType":"126","messageId":"127","endLine":450,"endColumn":25},{"ruleId":"128","severity":1,"message":"129","line":474,"column":31,"nodeType":"130","messageId":"131","endLine":474,"endColumn":32,"suggestions":"132"},{"ruleId":"133","severity":1,"message":"134","line":589,"column":5,"nodeType":"121","messageId":"135","endLine":634,"endColumn":16,"fix":"136"},{"ruleId":"124","severity":1,"message":"125","line":609,"column":42,"nodeType":"126","messageId":"127","endLine":609,"endColumn":44},{"ruleId":"124","severity":1,"message":"125","line":620,"column":46,"nodeType":"126","messageId":"127","endLine":620,"endColumn":48},{"ruleId":"124","severity":1,"message":"125","line":620,"column":95,"nodeType":"126","messageId":"127","endLine":620,"endColumn":97},{"ruleId":"124","severity":1,"message":"125","line":696,"column":27,"nodeType":"126","messageId":"127","endLine":696,"endColumn":29},{"ruleId":"124","severity":1,"message":"125","line":711,"column":41,"nodeType":"126","messageId":"127","endLine":711,"endColumn":43},{"ruleId":"124","severity":1,"message":"125","line":718,"column":52,"nodeType":"126","messageId":"127","endLine":718,"endColumn":54},{"ruleId":"124","severity":1,"message":"125","line":718,"column":101,"nodeType":"126","messageId":"127","endLine":718,"endColumn":103},{"ruleId":"109","severity":1,"message":"137","line":769,"column":7,"nodeType":"111","messageId":"112","endLine":769,"endColumn":22},{"ruleId":"109","severity":1,"message":"138","line":770,"column":7,"nodeType":"111","messageId":"112","endLine":770,"endColumn":20},{"ruleId":"109","severity":1,"message":"139","line":1096,"column":11,"nodeType":"111","messageId":"112","endLine":1096,"endColumn":16},{"ruleId":"124","severity":1,"message":"125","line":1135,"column":41,"nodeType":"126","messageId":"127","endLine":1135,"endColumn":43},{"ruleId":"109","severity":1,"message":"140","line":1161,"column":23,"nodeType":"111","messageId":"112","endLine":1161,"endColumn":27},{"ruleId":"124","severity":1,"message":"125","line":1543,"column":30,"nodeType":"126","messageId":"127","endLine":1543,"endColumn":32},{"ruleId":"124","severity":1,"message":"125","line":1546,"column":35,"nodeType":"126","messageId":"127","endLine":1546,"endColumn":37},{"ruleId":"124","severity":1,"message":"125","line":1549,"column":40,"nodeType":"126","messageId":"127","endLine":1549,"endColumn":42},{"ruleId":"124","severity":1,"message":"125","line":1613,"column":41,"nodeType":"126","messageId":"127","endLine":1613,"endColumn":43},{"ruleId":"124","severity":1,"message":"125","line":1680,"column":33,"nodeType":"126","messageId":"127","endLine":1680,"endColumn":35},{"ruleId":"124","severity":1,"message":"125","line":1704,"column":42,"nodeType":"126","messageId":"127","endLine":1704,"endColumn":44},{"ruleId":"124","severity":1,"message":"125","line":1762,"column":35,"nodeType":"126","messageId":"127","endLine":1762,"endColumn":37},{"ruleId":"124","severity":1,"message":"125","line":1764,"column":42,"nodeType":"126","messageId":"127","endLine":1764,"endColumn":44},{"ruleId":"124","severity":1,"message":"125","line":1766,"column":42,"nodeType":"126","messageId":"127","endLine":1766,"endColumn":44},{"ruleId":"119","severity":1,"message":"120","line":2009,"column":7,"nodeType":"121","messageId":"122","endLine":2009,"endColumn":8,"fix":"141"},{"ruleId":"124","severity":1,"message":"125","line":2095,"column":28,"nodeType":"126","messageId":"127","endLine":2095,"endColumn":30},{"ruleId":"124","severity":1,"message":"125","line":2099,"column":33,"nodeType":"126","messageId":"127","endLine":2099,"endColumn":35},{"ruleId":"124","severity":1,"message":"125","line":2102,"column":33,"nodeType":"126","messageId":"127","endLine":2102,"endColumn":35},{"ruleId":"119","severity":1,"message":"120","line":2116,"column":7,"nodeType":"121","messageId":"122","endLine":2116,"endColumn":8,"fix":"142"},{"ruleId":"124","severity":1,"message":"125","line":2198,"column":28,"nodeType":"126","messageId":"127","endLine":2198,"endColumn":30},{"ruleId":"124","severity":1,"message":"125","line":2202,"column":33,"nodeType":"126","messageId":"127","endLine":2202,"endColumn":35},{"ruleId":"124","severity":1,"message":"125","line":2205,"column":33,"nodeType":"126","messageId":"127","endLine":2205,"endColumn":35},{"ruleId":"124","severity":1,"message":"125","line":2227,"column":33,"nodeType":"126","messageId":"127","endLine":2227,"endColumn":35},{"ruleId":"124","severity":1,"message":"125","line":2230,"column":37,"nodeType":"126","messageId":"127","endLine":2230,"endColumn":39},{"ruleId":"124","severity":1,"message":"125","line":2233,"column":37,"nodeType":"126","messageId":"127","endLine":2233,"endColumn":39},{"ruleId":"143","severity":1,"message":"144","line":2316,"column":10,"nodeType":"145","endLine":2316,"endColumn":107},{"ruleId":"143","severity":1,"message":"144","line":2321,"column":10,"nodeType":"145","endLine":2321,"endColumn":117},{"ruleId":"143","severity":1,"message":"144","line":2326,"column":10,"nodeType":"145","endLine":2326,"endColumn":117},{"ruleId":"143","severity":1,"message":"144","line":2331,"column":9,"nodeType":"145","endLine":2331,"endColumn":116},{"ruleId":"143","severity":1,"message":"144","line":2336,"column":8,"nodeType":"145","endLine":2336,"endColumn":114},{"ruleId":"109","severity":1,"message":"146","line":2377,"column":12,"nodeType":"111","messageId":"112","endLine":2377,"endColumn":26},{"ruleId":"109","severity":1,"message":"147","line":2377,"column":29,"nodeType":"111","messageId":"112","endLine":2377,"endColumn":41},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'apiStackBaseUrl' is defined but never used.","Identifier","unusedVar","'apiStackAPIKey' is defined but never used.","'useParams' is defined but never used.","'Container' is defined but never used.","'Spinner' is defined but never used.","'customCheck' is defined but never used.","'sendEmail' is defined but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"150","text":"151"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-escape","Unnecessary escape character: \\@.","Literal","unnecessaryEscape",["152","153"],"no-whitespace-before-property","Unexpected whitespace before property catch.","unexpectedWhitespace",{"range":"154","text":"155"},"'dropdownVisible' is assigned a value but never used.","'current_token' is assigned a value but never used.","'value' is assigned a value but never used.","'uuid' is assigned a value but never used.",{"range":"156","text":"157"},{"range":"158","text":"157"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'paymentSuccess' is assigned a value but never used.","'paymentError' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[10444,10455],"\r\n        .",{"messageId":"159","fix":"160","desc":"161"},{"messageId":"162","fix":"163","desc":"164"},[18337,18339],".",[62861,62868],"\r\n    .",[66406,66413],"removeEscape",{"range":"165","text":"166"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"167","text":"168"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[13303,13304],"",[13303,13303],"\\"]